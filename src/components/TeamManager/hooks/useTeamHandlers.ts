//
//  useTeamHandlers.ts
//  ChiEAC
//
//  Team and member creation/editing handlers with Firebase integration
//  Created by Shivaang Kumar on 8/17/25.
//

import { setDoc, updateDoc, doc } from 'firebase/firestore';
import { db } from '../../../config/firebase';
import type { Team, TeamMember } from '../types';

export const createTeamHandlers = (
  teamManagerState: any,
  teamManagerActions: any
) => {
  const {
    teams,
    // teamMembers, // unused
    selectedTeam,
    filteredMembers,
    editingTeam,
    editingMember,
    teamFormData,
    memberFormData,
    autoGeneratedFields,
    memberAutoGeneratedFields,
    editingTeamFirestoreFields,
    editingMemberFirestoreFields,
    // originalMemberOrder, // unused
    // originalTeamOrder, // unused
    // isReorderingMode, // unused
    // isTeamReorderingMode, // unused
    // pendingCreation, // unused - moved to confirmation handlers
    // pendingDeletion, // unused
    // pendingMemberDeletion, // unused
    duplicateTeamData,
    rightPanelMode,
    teamRightPanelMode
  } = teamManagerState;

  const {
    setTeamFormData,
    setMemberFormData,
    setAutoGeneratedFields,
    setMemberAutoGeneratedFields,
    setEditingTeam,
    setEditingMember,
    setEditingTeamFirestoreFields,
    setEditingMemberFirestoreFields,
    setShowTeamForm,
    setShowMemberForm,
    setSelectedMemberForView,
    setRightPanelMode,
    setSelectedTeamForView,
    setTeamRightPanelMode,
    setShowChangeConfirmation,
    setPendingChanges,
    setPendingSubmitFunction,
    setShowCreateConfirmation,
    setPendingCreation,
    setShowDuplicateTeamWarning,
    setDuplicateTeamData,
    // setShowDeleteConfirmation, // unused
    // setPendingDeletion, // unused
    // setShowMemberDeleteConfirmation, // unused
    // setPendingMemberDeletion, // unused
    // setFilteredMembers, // unused
    // setTeams, // unused
    // setIsReorderingMode, // unused
    // setOriginalMemberOrder, // unused
    // setShowOrderChangeConfirmation, // unused
    // setIsTeamReorderingMode, // unused
    // setOriginalTeamOrder, // unused
    // setShowTeamOrderChangeConfirmation, // unused
    // setCurrentView, // unused
    // setSelectedTeam, // unused
    generateTeamFields,
    generateMemberFields,
    findTeamByName,
    detectChanges,
    fetchTeams,
    fetchTeamMembers
  } = teamManagerActions;

  // Form handlers
  const handleTeamNameChange = (name: string) => {
    setTeamFormData({ ...teamFormData, team_name: name });
    
    if (!editingTeam) {
      if (name.trim()) {
        generateTeamFields(name);
      } else {
        setAutoGeneratedFields({ team_code: '', id: '' });
      }
    }
  };

  const handleMemberNameChange = (name: string) => {
    setMemberFormData({ ...memberFormData, member_name: name });
    
    if (!editingMember && !name.trim()) {
      setMemberAutoGeneratedFields((prev: any) => ({
        ...prev,
        id: ''
      }));
    }
  };

  const handleMemberTeamChange = (teamCode: string) => {
    setMemberFormData({ ...memberFormData, member_team: teamCode });
    
    if (!editingMember) {
      setMemberAutoGeneratedFields((prev: any) => ({
        ...prev,
        member_team: teamCode
      }));
    }
  };

  // Expert mode handlers
  const confirmTeamExpertMode = () => {
    setEditingTeamFirestoreFields(true);
    teamManagerActions.setShowWarningPopup(false);
  };

  const disableTeamExpertMode = () => {
    if (editingTeamFirestoreFields) {
      setEditingTeamFirestoreFields(false);
      if (editingTeam) {
        setAutoGeneratedFields({
          team_code: editingTeam.team_code,
          id: editingTeam.id,
        });
      } else if (teamFormData.team_name.trim()) {
        generateTeamFields(teamFormData.team_name);
      }
    }
  };

  const confirmMemberExpertMode = () => {
    setEditingMemberFirestoreFields(true);
    teamManagerActions.setShowWarningPopup(false);
  };

  const disableMemberExpertMode = () => {
    if (editingMemberFirestoreFields) {
      setEditingMemberFirestoreFields(false);
      if (editingMember) {
        setMemberAutoGeneratedFields({
          id: editingMember.id || `member_${Date.now()}`,
          member_team: editingMember.member_team || memberFormData.member_team,
        });
      } else if (memberFormData.member_name.trim() && memberFormData.member_team.trim()) {
        generateMemberFields(memberFormData.member_name, memberFormData.member_team);
      }
    }
  };

  // Duplicate team handlers
  const confirmDuplicateTeamCreation = () => {
    if (duplicateTeamData.newTeamData) {
      const originalData = duplicateTeamData.newTeamData;
      const uniqueFields = generateTeamFields(originalData.team_name);
      
      const teamDataWithUniqueCode = {
        ...originalData,
        team_code: uniqueFields.team_code,
        id: uniqueFields.id,
      };
      
      setPendingCreation({
        type: 'team',
        data: teamDataWithUniqueCode
      });
      setShowCreateConfirmation(true);
    }
    setShowDuplicateTeamWarning(false);
  };

  const cancelDuplicateTeamCreation = () => {
    setShowDuplicateTeamWarning(false);
    setDuplicateTeamData({ existingTeam: null, newTeamData: {} });
  };

  // Submit handlers
  const handleTeamSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (editingTeam) {
      const changes = detectChanges(editingTeam, teamFormData, 'team');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'team',
          original: editingTeam,
          updated: teamFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeTeamUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    } else {
      const existingTeam = findTeamByName(teamFormData.team_name);
      if (existingTeam) {
        const autoGeneratedFieldsData = generateTeamFields(teamFormData.team_name);
        const teamDataWithAutoFields = {
          ...teamFormData,
          team_code: autoGeneratedFieldsData.team_code,
          id: autoGeneratedFieldsData.id,
        };
        
        setDuplicateTeamData({
          existingTeam: existingTeam,
          newTeamData: teamDataWithAutoFields
        });
        setShowDuplicateTeamWarning(true);
        return;
      }
      
      const teamData = {
        ...teamFormData,
        team_code: autoGeneratedFields.team_code,
        id: autoGeneratedFields.id,
      };
      
      setPendingCreation({
        type: 'team',
        data: teamData
      });
      setShowCreateConfirmation(true);
      return;
    }
    
    executeTeamUpdate();
  };

  const handleMemberSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (editingMember) {
      const changes = detectChanges(editingMember, memberFormData, 'member');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'member',
          original: editingMember,
          updated: memberFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeMemberUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    } else {
      const memberData = {
        ...memberFormData,
        member_team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
        team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
        id: memberAutoGeneratedFields.id,
      };
      
      setPendingCreation({
        type: 'member',
        data: memberData
      });
      setShowCreateConfirmation(true);
      return;
    }
    
    executeMemberUpdate();
  };

  // Execution functions
  const executeTeamUpdate = async () => {
    try {
      if (editingTeam) {
        await updateDoc(doc(db, 'teams', editingTeam.id), {
          ...teamFormData,
          team_code: editingTeam.team_code,
          id: editingTeam.id,
        });
      } else {
        const newOrder = teams.length > 0 ? Math.max(...teams.map((t: any) => t.order)) + 1 : 0;
        const teamData = {
          ...teamFormData,
          team_code: autoGeneratedFields.team_code,
          id: autoGeneratedFields.id,
          order: newOrder,
        };
        
        await setDoc(doc(db, 'teams', autoGeneratedFields.id), teamData);
      }
      
      setTeamFormData({ team_name: '', team_description: '' });
      setShowTeamForm(false);
      setEditingTeam(null);
      setAutoGeneratedFields({ team_code: '', id: '' });
      setEditingTeamFirestoreFields(false);
      setShowChangeConfirmation(false);
      fetchTeams();
    } catch (error) {
      console.error('Error saving team:', error);
    }
  };

  const executeMemberUpdate = async () => {
    try {
      if (editingMember) {
        const memberData = {
          ...memberFormData,
          member_team: editingMember.member_team,
          team: editingMember.team || editingMember.member_team,
          id: editingMember.id,
        };

        await updateDoc(doc(db, 'team_members', editingMember.id), memberData);
      } else {
        const memberData = {
          ...memberFormData,
          member_team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
          team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
          id: memberAutoGeneratedFields.id,
        };

        const newOrder = filteredMembers.length > 0 ? Math.max(...filteredMembers.map((m: any) => m.order)) + 1 : 0;
        await setDoc(doc(db, 'team_members', memberAutoGeneratedFields.id), {
          ...memberData,
          order: newOrder,
        });
      }
      
      setMemberFormData({
        member_name: '',
        member_title: '',
        member_summary: '',
        member_summary_short: '',
        member_team: '',
        member_image_link: '',
      });
      setMemberAutoGeneratedFields({ id: '', member_team: '' });
      setEditingMemberFirestoreFields(false);
      setShowMemberForm(false);
      
      if (editingMember && rightPanelMode === 'edit') {
        setRightPanelMode('view');
        setSelectedMemberForView(editingMember);
      } else {
        setRightPanelMode(null);
        setSelectedMemberForView(null);
      }
      
      setEditingMember(null);
      setShowChangeConfirmation(false);
      fetchTeamMembers();
    } catch (error) {
      console.error('❌ Error saving member:', error);
      alert(`Error saving member: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Edit handlers
  const handleEditTeam = (team: Team) => {
    disableTeamExpertMode();
    setEditingTeam(team);
    setTeamFormData({
      team_name: team.team_name,
      team_description: team.team_description,
    });
    setAutoGeneratedFields({
      team_code: team.team_code,
      id: team.id,
    });

    if (teamRightPanelMode === 'view') {
      setTeamRightPanelMode('edit');
    } else {
      setSelectedTeamForView(team);
      setTeamRightPanelMode('edit');
    }
    setShowTeamForm(true);
  };

  const handleEditMember = (member: TeamMember) => {
    disableMemberExpertMode();
    setEditingMember(member);
    const formData = {
      member_name: member.name || member.member_name || '',
      member_title: member.title || member.member_title || '',
      member_summary: member.bio || member.member_summary || '',
      member_summary_short: member.bioShort || member.member_summary_short || '',
      member_team: member.team || member.member_team || '',
      member_image_link: member.imageURL || member.member_image_link || '',
    };
    
    setMemberFormData(formData);
    
    setMemberAutoGeneratedFields({
      id: member.id || `member_${Date.now()}`,
      member_team: member.team || member.member_team || '',
    });

    if (rightPanelMode === 'view') {
      setRightPanelMode('edit');
    } else {
      setSelectedMemberForView(member);
      setRightPanelMode('edit');
    }
    setShowMemberForm(true);
  };

  // View handlers
  const handleMemberCardClick = (member: TeamMember) => {
    setSelectedMemberForView(member);
    setRightPanelMode('view');
    setShowMemberForm(false);
    setEditingMember(null);
  };

  const handleTeamCardClick = (team: Team) => {
    setSelectedTeamForView(team);
    setTeamRightPanelMode('view');
  };

  const handleViewTeamDetails = (team: Team) => {
    setSelectedTeamForView(team);
    setTeamRightPanelMode('view');
  };

  // Panel close handlers
  const closeRightPanel = () => {
    setSelectedMemberForView(null);
    setRightPanelMode(null);
    setShowMemberForm(false);
    setEditingMember(null);
  };

  const closeTeamRightPanel = () => {
    setSelectedTeamForView(null);
    setTeamRightPanelMode(null);
    setShowTeamForm(false);
    setEditingTeam(null);
  };

  return {
    handleTeamNameChange,
    handleMemberNameChange,
    handleMemberTeamChange,
    confirmTeamExpertMode,
    disableTeamExpertMode,
    confirmMemberExpertMode,
    disableMemberExpertMode,
    confirmDuplicateTeamCreation,
    cancelDuplicateTeamCreation,
    handleTeamSubmit,
    handleMemberSubmit,
    executeTeamUpdate,
    executeMemberUpdate,
    handleEditTeam,
    handleEditMember,
    handleMemberCardClick,
    handleTeamCardClick,
    handleViewTeamDetails,
    closeRightPanel,
    closeTeamRightPanel
  };
};
