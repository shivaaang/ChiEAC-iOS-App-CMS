//
//  useTeamManager.ts
//  ChiEAC
//
//  Custom hook for managing teams and members data with Firebase
//  Created by Shivaang Kumar on 8/17/25.
//

import { useState, useEffect } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../../config/firebase';
import type { 
  Team, 
  TeamMember, 
  AutoGeneratedFields, 
  MemberAutoGeneratedFields, 
  PendingCreation, 
  PendingDeletion,
  ChangeItem,
  PendingChanges,
  DuplicateTeamData,
  ViewType
} from '../types';

export const useTeamManager = () => {
  // Core state
  const [teams, setTeams] = useState<Team[]>([]);
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  const [filteredMembers, setFilteredMembers] = useState<TeamMember[]>([]);
  const [loading, setLoading] = useState(true);
  
  // View state
  const [currentView, setCurrentView] = useState<ViewType>('teams');
  
  // Reordering state
  const [isReorderingMode, setIsReorderingMode] = useState(false);
  const [originalMemberOrder, setOriginalMemberOrder] = useState<TeamMember[]>([]);
  const [showOrderChangeConfirmation, setShowOrderChangeConfirmation] = useState(false);
  
  // Team reordering state
  const [isTeamReorderingMode, setIsTeamReorderingMode] = useState(false);
  const [originalTeamOrder, setOriginalTeamOrder] = useState<Team[]>([]);
  const [showTeamOrderChangeConfirmation, setShowTeamOrderChangeConfirmation] = useState(false);
  
  // Form states
  const [showTeamForm, setShowTeamForm] = useState(false);
  const [showMemberForm, setShowMemberForm] = useState(false);
  const [editingTeam, setEditingTeam] = useState<Team | null>(null);
  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);
  
  const [teamFormData, setTeamFormData] = useState({
    team_name: '',
    team_description: '',
  });
  
  const [memberFormData, setMemberFormData] = useState({
    member_name: '',
    member_title: '',
    member_summary: '',
    member_summary_short: '',
    member_team: '',
    member_image_link: '',
  });
  
  // Auto-generated fields
  const [autoGeneratedFields, setAutoGeneratedFields] = useState<AutoGeneratedFields>({
    team_code: '',
    id: '',
  });
  
  const [memberAutoGeneratedFields, setMemberAutoGeneratedFields] = useState<MemberAutoGeneratedFields>({
    id: '',
    member_team: '',
  });
  
  // Expert mode states
  const [editingTeamFirestoreFields, setEditingTeamFirestoreFields] = useState(false);
  const [editingMemberFirestoreFields, setEditingMemberFirestoreFields] = useState(false);
  const [showWarningPopup, setShowWarningPopup] = useState(false);
  const [currentWarningType, setCurrentWarningType] = useState<'team' | 'member'>('team');
  
  // Confirmation states
  const [showChangeConfirmation, setShowChangeConfirmation] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<PendingChanges>({
    type: 'team',
    original: {} as Team | TeamMember,
    updated: {},
    changes: []
  });
  const [pendingSubmitFunction, setPendingSubmitFunction] = useState<(() => void) | null>(null);
  
  const [showCreateConfirmation, setShowCreateConfirmation] = useState(false);
  const [pendingCreation, setPendingCreation] = useState<PendingCreation>({
    type: 'team',
    data: {}
  });
  
  // Duplicate team detection
  const [showDuplicateTeamWarning, setShowDuplicateTeamWarning] = useState(false);
  const [duplicateTeamData, setDuplicateTeamData] = useState<DuplicateTeamData>({
    existingTeam: null,
    newTeamData: {}
  });
  
  // Delete confirmation states
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [pendingDeletion, setPendingDeletion] = useState<PendingDeletion>({
    team: null,
    affectedMembers: []
  });
  
  const [showMemberDeleteConfirmation, setShowMemberDeleteConfirmation] = useState(false);
  const [pendingMemberDeletion, setPendingMemberDeletion] = useState<TeamMember | null>(null);
  
  // Detail view states
  const [selectedMemberForView, setSelectedMemberForView] = useState<TeamMember | null>(null);
  const [rightPanelMode, setRightPanelMode] = useState<'view' | 'edit' | null>(null);
  const [selectedTeamForView, setSelectedTeamForView] = useState<Team | null>(null);
  const [teamRightPanelMode, setTeamRightPanelMode] = useState<'view' | 'edit' | 'add' | null>(null);

  // ID uniqueness validation functions
  const checkTeamIdExists = (id: string): boolean => {
    return teams.some(team => team.id === id);
  };

  const checkMemberIdExists = (id: string): boolean => {
    return teamMembers.some(member => member.id === id);
  };

  const generateUniqueTeamId = (baseName: string): string => {
    const trimmedName = baseName.trim();
    const code = trimmedName.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    let baseId = `team.${code}`;
    let uniqueId = baseId;
    let counter = 1;
    
    while (checkTeamIdExists(uniqueId)) {
      uniqueId = `${baseId}_${counter}`;
      counter++;
    }
    
    return uniqueId;
  };

  const generateUniqueMemberId = (memberName: string, teamCode: string): string => {
    const trimmedName = memberName.trim();
    const nameForId = trimmedName.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    let baseId = `member.${teamCode}.${nameForId}`;
    let uniqueId = baseId;
    let counter = 1;
    
    while (checkMemberIdExists(uniqueId)) {
      uniqueId = `${baseId}_${counter}`;
      counter++;
    }
    
    return uniqueId;
  };

  // Generate team fields
  const generateTeamFields = (teamName: string) => {
    const trimmedName = teamName.trim();
    const uniqueId = generateUniqueTeamId(trimmedName);
    const uniqueTeamCode = uniqueId.replace('team.', '');
    setAutoGeneratedFields({ team_code: uniqueTeamCode, id: uniqueId });
    return { team_code: uniqueTeamCode, id: uniqueId };
  };

  // Generate member fields
  const generateMemberFields = (memberName: string, teamCode: string) => {
    const uniqueId = generateUniqueMemberId(memberName, teamCode);
    setMemberAutoGeneratedFields({ id: uniqueId, member_team: teamCode });
    return { id: uniqueId, member_team: teamCode };
  };

  // Duplicate checking
  const findTeamByName = (teamName: string): Team | null => {
    const trimmedName = teamName.trim().toLowerCase();
    return teams.find(team => team.team_name.toLowerCase() === trimmedName) || null;
  };

  // Data fetching
  const fetchTeams = async () => {
    try {
      console.log('🔍 Fetching teams from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'teams'));
      const items: Team[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as Team);
      });
      items.sort((a, b) => a.order - b.order);
      setTeams(items);
      
      if (items.length > 0 && !selectedTeam) {
        setSelectedTeam(items[0]);
      }
    } catch (error) {
      console.error('❌ Error fetching teams:', error);
    }
  };

  const fetchTeamMembers = async () => {
    try {
      console.log('🔍 Fetching team members from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'team_members'));
      const items: TeamMember[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as TeamMember);
      });
      items.sort((a, b) => a.order - b.order);
      setTeamMembers(items);
    } catch (error) {
      console.error('❌ Error fetching team members:', error);
    } finally {
      setLoading(false);
    }
  };

  // Change detection
  const detectChanges = (original: any, updated: any, type: 'team' | 'member'): ChangeItem[] => {
    const changes: ChangeItem[] = [];
    
    if (type === 'team') {
      if (original.team_name !== updated.team_name) {
        changes.push({
          field: 'Team Name',
          oldValue: original.team_name,
          newValue: updated.team_name
        });
      }
      if (original.team_description !== updated.team_description) {
        changes.push({
          field: 'Team Description',
          oldValue: original.team_description,
          newValue: updated.team_description
        });
      }
    } else {
      if (original.member_name !== updated.member_name) {
        changes.push({
          field: 'Full Name',
          oldValue: original.member_name,
          newValue: updated.member_name
        });
      }
      if (original.member_title !== updated.member_title) {
        changes.push({
          field: 'Title/Position',
          oldValue: original.member_title,
          newValue: updated.member_title
        });
      }
      if (original.member_team !== updated.member_team) {
        changes.push({
          field: 'Team',
          oldValue: original.member_team,
          newValue: updated.member_team
        });
      }
      if (original.member_summary !== updated.member_summary) {
        changes.push({
          field: 'Full Bio',
          oldValue: original.member_summary,
          newValue: updated.member_summary
        });
      }
      if (original.member_summary_short !== updated.member_summary_short) {
        changes.push({
          field: 'Short Bio',
          oldValue: original.member_summary_short,
          newValue: updated.member_summary_short
        });
      }
      if (original.member_image_link !== updated.member_image_link) {
        changes.push({
          field: 'Image URL',
          oldValue: original.member_image_link || 'None',
          newValue: updated.member_image_link || 'None'
        });
      }
    }
    
    return changes;
  };

  // Panel close handlers
  const closeRightPanel = () => {
    setSelectedMemberForView(null);
    setRightPanelMode(null);
    setShowMemberForm(false);
    setEditingMember(null);
  };

  const closeTeamRightPanel = () => {
    setSelectedTeamForView(null);
    setTeamRightPanelMode(null);
    setShowTeamForm(false);
    setEditingTeam(null);
  };

  // Effects
  useEffect(() => {
    if (!editingMember && memberFormData.member_name.trim() && memberFormData.member_team.trim() && !editingMemberFirestoreFields) {
      generateMemberFields(memberFormData.member_name, memberFormData.member_team);
    }
  }, [memberFormData.member_name, memberFormData.member_team, editingMemberFirestoreFields, editingMember]);

  useEffect(() => {
    if (selectedTeam) {
      const filtered = teamMembers.filter(member => 
        member.team === selectedTeam.team_code || 
        member.member_team === selectedTeam.team_code
      );
      setFilteredMembers(filtered);
    }
  }, [selectedTeam, teamMembers]);

  useEffect(() => {
    const loadData = async () => {
      await Promise.all([fetchTeams(), fetchTeamMembers()]);
    };
    loadData();
  }, []);

  return {
    // State
    teams,
    teamMembers,
    selectedTeam,
    filteredMembers,
    loading,
    currentView,
    isReorderingMode,
    originalMemberOrder,
    showOrderChangeConfirmation,
    isTeamReorderingMode,
    originalTeamOrder,
    showTeamOrderChangeConfirmation,
    showTeamForm,
    showMemberForm,
    editingTeam,
    editingMember,
    teamFormData,
    memberFormData,
    autoGeneratedFields,
    memberAutoGeneratedFields,
    editingTeamFirestoreFields,
    editingMemberFirestoreFields,
    showWarningPopup,
    currentWarningType,
    showChangeConfirmation,
    pendingChanges,
    pendingSubmitFunction,
    showCreateConfirmation,
    pendingCreation,
    showDuplicateTeamWarning,
    duplicateTeamData,
    showDeleteConfirmation,
    pendingDeletion,
    showMemberDeleteConfirmation,
    pendingMemberDeletion,
    selectedMemberForView,
    rightPanelMode,
    selectedTeamForView,
    teamRightPanelMode,
    
    // Setters
    setTeams,
    setTeamMembers,
    setSelectedTeam,
    setFilteredMembers,
    setLoading,
    setCurrentView,
    setIsReorderingMode,
    setOriginalMemberOrder,
    setShowOrderChangeConfirmation,
    setIsTeamReorderingMode,
    setOriginalTeamOrder,
    setShowTeamOrderChangeConfirmation,
    setShowTeamForm,
    setShowMemberForm,
    setEditingTeam,
    setEditingMember,
    setTeamFormData,
    setMemberFormData,
    setAutoGeneratedFields,
    setMemberAutoGeneratedFields,
    setEditingTeamFirestoreFields,
    setEditingMemberFirestoreFields,
    setShowWarningPopup,
    setCurrentWarningType,
    setShowChangeConfirmation,
    setPendingChanges,
    setPendingSubmitFunction,
    setShowCreateConfirmation,
    setPendingCreation,
    setShowDuplicateTeamWarning,
    setDuplicateTeamData,
    setShowDeleteConfirmation,
    setPendingDeletion,
    setShowMemberDeleteConfirmation,
    setPendingMemberDeletion,
    setSelectedMemberForView,
    setRightPanelMode,
    setSelectedTeamForView,
    setTeamRightPanelMode,
    
    // Functions
    generateTeamFields,
    generateMemberFields,
    generateUniqueTeamId,
    generateUniqueMemberId,
    findTeamByName,
    fetchTeams,
    fetchTeamMembers,
    detectChanges,
    checkTeamIdExists,
    checkMemberIdExists,
    closeRightPanel,
    closeTeamRightPanel
  };
};
