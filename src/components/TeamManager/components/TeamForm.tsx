//
//  TeamForm.tsx
//  ChiEAC
//
//  Professional team creation/editing form with expert mode (supports modal and inline)
//  Created by Shivaang Kumar on 8/18/25.
//

import React from 'react';
import type { Team } from '../types';

interface TeamFormProps {
  isVisible: boolean;
  editingTeam: Team | null;
  teamFormData: {
    team_name: string;
    team_description: string;
  };
  autoGeneratedFields: {
    team_code: string;
    id: string;
  };
  editingTeamFirestoreFields: boolean;
  onSubmit: (e: React.FormEvent) => void;
  onTeamNameChange: (name: string) => void;
  onTeamDescriptionChange: (description: string) => void;
  onClose: () => void;
  onExpertModeToggle: () => void;
  onDisableExpertMode: () => void;
  onAutoGeneratedFieldsChange?: (fields: { team_code?: string; id?: string }) => void;
  isInline?: boolean;
}

export const TeamForm: React.FC<TeamFormProps> = ({
  isVisible,
  editingTeam,
  teamFormData,
  autoGeneratedFields,
  editingTeamFirestoreFields,
  onSubmit,
  onTeamNameChange,
  onTeamDescriptionChange,
  onClose,
  onExpertModeToggle,
  onDisableExpertMode,
  onAutoGeneratedFieldsChange,
  isInline = false
}) => {
  if (!isVisible) return null;

  const formContent = (
    <div>
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start gap-4 mb-6">
        <h3 className="font-semibold text-white text-lg">
          {editingTeam ? 'Edit Team' : 'Add New Team'}
        </h3>
        <button
          onClick={onClose}
          className="text-slate-400 hover:text-white transition-colors duration-200 self-end sm:self-start"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form onSubmit={onSubmit}>
        {/* User Editable Fields */}
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-2">
              Team Name <span className="text-red-400">*</span>
            </label>
            <input
              type="text"
              value={teamFormData.team_name}
              onChange={(e) => onTeamNameChange(e.target.value)}
              className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="Enter team name"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-2">
              Team Description <span className="text-red-400">*</span>
            </label>
            <textarea
              value={teamFormData.team_description}
              onChange={(e) => onTeamDescriptionChange(e.target.value)}
              className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="Enter team description"
              rows={4}
              required
            />
          </div>
        </div>

        {/* Unified Firestore DB Fields Section (matching legacy exactly) */}
        <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-600 mt-4">
          {/* Expert Mode Toggle - ONLY when adding new teams */}
          {!editingTeam && (
            <div className="flex items-center justify-between mb-4">
              <div className="flex-1 mr-4">
                <div className="font-medium text-slate-300 mb-1">Expert Mode</div>
                <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
              </div>
              <button
                type="button"
                onClick={() => {
                  if (!editingTeamFirestoreFields) {
                    onExpertModeToggle();
                  } else {
                    onDisableExpertMode();
                  }
                }}
                className={`px-5 py-2.5 rounded-lg font-medium transition-all duration-300 shadow-lg flex items-center gap-2 text-sm ${
                  editingTeamFirestoreFields
                    ? 'bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700 shadow-red-500/25'
                    : 'bg-gradient-to-r from-slate-600 to-slate-700 text-slate-200 hover:from-slate-500 hover:to-slate-600 shadow-slate-700/25 border border-slate-500/30'
                }`}
              >
                {editingTeamFirestoreFields ? (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    Safe Mode
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L5.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                    Expert Mode
                  </>
                )}
              </button>
            </div>
          )}

          {/* Expert Mode: Editable Firestore Fields */}
          {!editingTeam && editingTeamFirestoreFields ? (
            <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
              <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                <input
                  type="text"
                  value={autoGeneratedFields.team_code}
                  onChange={(e) => {
                    if (onAutoGeneratedFieldsChange) {
                      onAutoGeneratedFieldsChange({ team_code: e.target.value });
                    }
                  }}
                  className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="team_code"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                <input
                  type="text"
                  value={autoGeneratedFields.id}
                  onChange={(e) => {
                    if (onAutoGeneratedFieldsChange) {
                      onAutoGeneratedFieldsChange({ id: e.target.value });
                    }
                  }}
                  className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="Document ID"
                />
              </div>
            </div>
          ) : (
            /* Safe Mode: Read-only Firestore Fields Display - for both new and editing teams */
            <div className="space-y-2">
              <h4 className="font-medium text-slate-300 mb-2">Firestore DB Fields:</h4>
              <div className="text-sm space-y-1">
                <div><span className="text-slate-400">Team Code:</span> <span className="text-orange-300 font-mono">{editingTeam ? editingTeam.team_code : autoGeneratedFields.team_code}</span></div>
                <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{editingTeam ? editingTeam.id : autoGeneratedFields.id}</span></div>
              </div>
            </div>
          )}
        </div>

        <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 pt-6">
          <button
            type="button"
            onClick={onClose}
            className="w-full px-4 py-2 bg-slate-600 text-white rounded-lg hover:bg-slate-500 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="w-full px-4 py-2 bg-gradient-to-r from-orange-500 to-amber-500 text-white rounded-lg hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
          >
            {editingTeam ? 'Update Team' : 'Create Team'}
          </button>
        </div>
      </form>
    </div>
  );

  // Return inline or modal version
  if (isInline) {
    return formContent;
  }

  return (
    <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-slate-800 p-6 rounded-lg border border-orange-500/30 max-w-lg w-full mx-4 shadow-xl max-h-[90vh] overflow-y-auto">
        {formContent}
      </div>
    </div>
  );
};