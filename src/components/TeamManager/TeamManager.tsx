//
//  TeamManager.tsx
//  ChiEAC
//
//  Complete modular TeamManager component with all functionality
//  Created by Shivaang Kumar on 8/18/25.
//

import React from 'react';
import { useTeamManager, useTeamHandlers, useConfirmationHandlers } from './hooks';
import { 
  TeamsView, 
  MembersView, 
  TeamForm, 
  MemberForm,
  CreationConfirmationDialog, 
  ExpertModeWarningDialog,
  DeleteConfirmationDialog,
  MemberDeleteConfirmationDialog,
  ChangeConfirmationDialog,
  OrderChangeConfirmationDialog
} from './components';
import type { DropResult } from '@hello-pangea/dnd';

const TeamManager: React.FC = () => {
  // Team management state and functions
  const teamManager = useTeamManager();
  const teamHandlers = useTeamHandlers(teamManager);
  const confirmationHandlers = useConfirmationHandlers(teamManager, teamHandlers);

  // Navigation handlers
  const handleTeamClick = (team: any) => {
    teamManager.setSelectedTeam(team);
    teamManager.setCurrentView('members');
    // Clear member details when switching teams
    teamManager.setSelectedMemberForView(null);
    teamManager.setRightPanelMode(null);
    teamManager.setShowMemberForm(false);
    teamManager.setEditingMember(null);
  };

  const handleBackToTeams = () => {
    teamManager.setCurrentView('teams');
    teamManager.setSelectedTeam(null);
    teamManager.setIsReorderingMode(false);
    // Clear member details when going back to teams
    teamManager.setSelectedMemberForView(null);
    teamManager.setRightPanelMode(null);
    teamManager.setShowMemberForm(false);
    teamManager.setEditingMember(null);
  };

  // Edit handlers
  const handleEditTeam = (team: any) => {
    teamHandlers.disableTeamExpertMode(); // Turn off expert mode when switching teams
    teamManager.setEditingTeam(team);
    teamManager.setTeamFormData({
      team_name: team.team_name,
      team_description: team.team_description,
    });
    teamManager.setAutoGeneratedFields({
      team_code: team.team_code,
      id: team.id,
    });
    
    // Simply open the team form modal
    teamManager.setShowTeamForm(true);
  };

  // Create handlers
  const handleCreateTeam = () => {
    // Reset all form states when opening new team form
    teamHandlers.disableTeamExpertMode(); // Turn off expert mode when opening new team form
    teamManager.setEditingTeam(null); // Clear any existing edit state
    teamManager.setTeamFormData({ team_name: '', team_description: '' }); // Reset form data
    teamManager.setAutoGeneratedFields({ team_code: '', id: '' }); // Reset auto fields
    teamManager.setShowTeamForm(true); // Show the team form modal
  };

  const handleCreateMember = () => {
    teamHandlers.disableMemberExpertMode(); // Turn off expert mode when opening new member form
    // Set default team to current selected team
    if (teamManager.selectedTeam) {
      teamManager.setMemberFormData({
        member_name: '',
        member_title: '',
        member_summary: '',
        member_summary_short: '',
        member_team: teamManager.selectedTeam.team_code,
        member_image_link: '',
      });
      // Initialize auto-generated fields for selected team (empty ID until name is entered)
      teamManager.setMemberAutoGeneratedFields({
        id: '',
        member_team: teamManager.selectedTeam.team_code,
      });
    }
    teamManager.setEditingMember(null);
    teamManager.setShowMemberForm(true);
  };

  // Member card click handler
  const handleMemberCardClick = (member: any) => {
    console.log('👁️ Viewing member:', member);
    teamManager.setSelectedMemberForView(member);
    teamManager.setRightPanelMode('view');
    teamManager.setShowMemberForm(false);
    teamManager.setEditingMember(null);
  };

  // Drag and drop handlers
  const handleTeamDragEnd = (result: DropResult) => {
    if (!result.destination) return;

    const sourceIndex = result.source.index;
    const destinationIndex = result.destination.index;

    if (sourceIndex === destinationIndex) return;

    // Reorder teams array
    const newTeams = Array.from(teamManager.teams);
    const [reorderedTeam] = newTeams.splice(sourceIndex, 1);
    newTeams.splice(destinationIndex, 0, reorderedTeam);

    // Update order values and save
    const updatedTeams = newTeams.map((team, index) => ({
      ...team,
      order: index + 1
    }));

    teamManager.setTeams(updatedTeams);
    confirmationHandlers.enterTeamReorderingMode();
  };

  const handleMemberDragEnd = (result: DropResult) => {
    if (!result.destination || !teamManager.selectedTeam) return;

    const sourceIndex = result.source.index;
    const destinationIndex = result.destination.index;

    if (sourceIndex === destinationIndex) return;

    // Get filtered members for current team
    const currentTeamMembers = teamManager.filteredMembers;
    const newMembers = Array.from(currentTeamMembers);
    const [reorderedMember] = newMembers.splice(sourceIndex, 1);
    newMembers.splice(destinationIndex, 0, reorderedMember);

    // Update order values
    const updatedMembers = newMembers.map((member, index) => ({
      ...member,
      order: index + 1
    }));

    // Update the main teamMembers array
    const allMembers = teamManager.teamMembers.map(member => {
      const updatedMember = updatedMembers.find(um => um.id === member.id);
      return updatedMember || member;
    });

    teamManager.setTeamMembers(allMembers);
    teamManager.setFilteredMembers(updatedMembers);
  };

  if (teamManager.loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-chieac-primary"></div>
      </div>
    );
  }

  // Render based on current view
  if (teamManager.currentView === 'teams') {
    return (
      <div>
          <TeamsView
            teams={teamManager.teams}
            isReorderingMode={teamManager.isTeamReorderingMode}
            teamMembers={teamManager.teamMembers}
            onTeamClick={handleTeamClick}
            onDeleteTeam={confirmationHandlers.handleDeleteTeam}
            onTeamDragEnd={handleTeamDragEnd}
            onCreateTeam={handleCreateTeam}
            onEnterTeamReorderingMode={confirmationHandlers.enterTeamReorderingMode}
            onHandleDoneTeamReordering={confirmationHandlers.handleDoneTeamReordering}
            onCancelTeamReordering={confirmationHandlers.cancelTeamReordering}
          />

          {/* Team Form Modal */}
          <TeamForm
            isVisible={teamManager.showTeamForm}
            editingTeam={teamManager.editingTeam}
            teamFormData={teamManager.teamFormData}
            autoGeneratedFields={teamManager.autoGeneratedFields}
            editingTeamFirestoreFields={teamManager.editingTeamFirestoreFields}
            onSubmit={teamHandlers.handleTeamSubmit}
            onTeamNameChange={teamHandlers.handleTeamNameChange}
            onTeamDescriptionChange={(description: string) => 
              teamManager.setTeamFormData({ ...teamManager.teamFormData, team_description: description })
            }
            onClose={() => teamManager.setShowTeamForm(false)}
            onExpertModeToggle={() => {
              teamManager.setCurrentWarningType('team');
              teamManager.setShowWarningPopup(true);
            }}
            onDisableExpertMode={teamHandlers.disableTeamExpertMode}
            onAutoGeneratedFieldsChange={(fields) => 
              teamManager.setAutoGeneratedFields({ ...teamManager.autoGeneratedFields, ...fields })
            }
          />

          {/* Order Change Confirmation for Teams */}
          <OrderChangeConfirmationDialog
            isVisible={teamManager.showTeamOrderChangeConfirmation}
            isTeamReordering={true}
            onConfirm={confirmationHandlers.confirmTeamOrderChanges}
            onCancel={confirmationHandlers.cancelTeamReordering}
          />
        

        {/* Global Dialogs */}
        {renderGlobalDialogs()}
      </div>
    );
  }

  // Members view
  return (
    <div>
        <MembersView
          selectedTeam={teamManager.selectedTeam}
          teamMembers={teamManager.filteredMembers}
          isReorderingMode={teamManager.isReorderingMode}
          selectedMemberForView={teamManager.selectedMemberForView}
          rightPanelMode={teamManager.rightPanelMode}
          onEditMember={teamHandlers.handleEditMember}
          onDeleteMember={confirmationHandlers.handleDeleteMember}
          onMemberDragEnd={handleMemberDragEnd}
          onToggleReorderMode={() => teamManager.setIsReorderingMode(!teamManager.isReorderingMode)}
          onCreateMember={handleCreateMember}
          onBackToTeams={handleBackToTeams}
          onCloseRightPanel={teamManager.closeRightPanel}
          onEnterReorderingMode={confirmationHandlers.enterReorderingMode}
          onHandleDoneReordering={confirmationHandlers.handleDoneReordering}
          onCancelReordering={confirmationHandlers.cancelReordering}
          onHandleMemberCardClick={handleMemberCardClick}
          onEditTeam={handleEditTeam}
          onDeleteTeam={confirmationHandlers.handleDeleteTeam}
        />

        {/* Member Form Modal */}
        <MemberForm
          isVisible={teamManager.showMemberForm}
          editingMember={teamManager.editingMember}
          memberFormData={teamManager.memberFormData}
          memberAutoGeneratedFields={teamManager.memberAutoGeneratedFields}
          editingMemberFirestoreFields={teamManager.editingMemberFirestoreFields}
          teams={teamManager.teams}
          onSubmit={teamHandlers.handleMemberSubmit}
          onMemberNameChange={teamHandlers.handleMemberNameChange}
          onMemberFormDataChange={(data) => 
            teamManager.setMemberFormData({ ...teamManager.memberFormData, ...data })
          }
          onClose={() => {
            teamManager.setShowMemberForm(false);
            teamManager.setEditingMember(null);
            teamManager.setRightPanelMode(null);
            teamManager.setSelectedMemberForView(null);
          }}
          onExpertModeToggle={() => {
            teamManager.setCurrentWarningType('member');
            teamManager.setShowWarningPopup(true);
          }}
          onDisableExpertMode={teamHandlers.disableMemberExpertMode}
          onMemberAutoGeneratedFieldsChange={(fields) => 
            teamManager.setMemberAutoGeneratedFields({ ...teamManager.memberAutoGeneratedFields, ...fields })
          }
        />

        {/* Team Form Modal - Also available in Members view */}
        <TeamForm
          isVisible={teamManager.showTeamForm}
          editingTeam={teamManager.editingTeam}
          teamFormData={teamManager.teamFormData}
          autoGeneratedFields={teamManager.autoGeneratedFields}
          editingTeamFirestoreFields={teamManager.editingTeamFirestoreFields}
          onSubmit={teamHandlers.handleTeamSubmit}
          onTeamNameChange={teamHandlers.handleTeamNameChange}
          onTeamDescriptionChange={(description: string) => 
            teamManager.setTeamFormData({ ...teamManager.teamFormData, team_description: description })
          }
          onClose={() => teamManager.setShowTeamForm(false)}
          onExpertModeToggle={() => {
            teamManager.setCurrentWarningType('team');
            teamManager.setShowWarningPopup(true);
          }}
          onDisableExpertMode={teamHandlers.disableTeamExpertMode}
          onAutoGeneratedFieldsChange={(fields) => 
            teamManager.setAutoGeneratedFields({ ...teamManager.autoGeneratedFields, ...fields })
          }
        />

        {/* Order Change Confirmation for Members */}
        <OrderChangeConfirmationDialog
          isVisible={teamManager.showOrderChangeConfirmation}
          isTeamReordering={false}
          onConfirm={confirmationHandlers.confirmOrderChanges}
          onCancel={confirmationHandlers.cancelReordering}
        />
      

      {/* Global Dialogs */}
      {renderGlobalDialogs()}
    </div>
  );

  // Helper function to render global dialogs
  function renderGlobalDialogs() {
    return (
      <>
        {/* Creation Confirmation Dialog */}
        <CreationConfirmationDialog
          isVisible={teamManager.showCreateConfirmation}
          pendingCreation={teamManager.pendingCreation}
          onConfirm={confirmationHandlers.confirmCreation}
          onCancel={confirmationHandlers.cancelCreation}
        />

        {/* Expert Mode Warning Dialog */}
        <ExpertModeWarningDialog
          isVisible={teamManager.showWarningPopup}
          warningType={teamManager.currentWarningType}
          onConfirm={teamManager.currentWarningType === 'team' ? teamHandlers.confirmTeamExpertMode : teamHandlers.confirmMemberExpertMode}
          onCancel={() => teamManager.setShowWarningPopup(false)}
        />

        {/* Delete Confirmation Dialog */}
        <DeleteConfirmationDialog
          isVisible={teamManager.showDeleteConfirmation}
          team={teamManager.pendingDeletion.team}
          affectedMembers={teamManager.pendingDeletion.affectedMembers}
          onConfirm={confirmationHandlers.executeTeamDeletion}
          onCancel={confirmationHandlers.cancelDeletion}
        />

        {/* Member Delete Confirmation Dialog */}
        <MemberDeleteConfirmationDialog
          isVisible={teamManager.showMemberDeleteConfirmation}
          member={teamManager.pendingMemberDeletion}
          onConfirm={confirmationHandlers.confirmMemberDeletion}
          onCancel={confirmationHandlers.cancelMemberDeletion}
        />

        {/* Change Confirmation Dialog */}
        <ChangeConfirmationDialog
          isVisible={teamManager.showChangeConfirmation}
          pendingChanges={teamManager.pendingChanges}
          onConfirm={confirmationHandlers.confirmChanges}
          onCancel={confirmationHandlers.cancelChanges}
        />
      </>
    );
  }
};

export default TeamManager;