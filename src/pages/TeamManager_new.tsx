//
//  TeamManager_new.tsx
//  ChiEAC
//
//  Created by Shivaang Kumar on 8/16/25.
//

import { useState, useEffect } from 'react';
import { collection, getDocs, updateDoc, deleteDoc, doc, setDoc } from 'firebase/firestore';
import { DragDropContext, Droppable, Draggable, type DropResult } from '@hello-pangea/dnd';
import { db } from '../config/firebase';
import type { TeamMember } from '../types';

interface Team {
  id: string;
  team_name: string;
  team_code: string;
  team_description: string;
  order: number;
}

export default function TeamManager() {
  const [teams, setTeams] = useState<Team[]>([]);
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  const [filteredMembers, setFilteredMembers] = useState<TeamMember[]>([]);
  const [loading, setLoading] = useState(true);
  
  // View state - 'teams' for teams overview, 'members' for team members view
  const [currentView, setCurrentView] = useState<'teams' | 'members'>('teams');
  
  // Form states
  const [showTeamForm, setShowTeamForm] = useState(false);
  const [showMemberForm, setShowMemberForm] = useState(false);
  const [editingTeam, setEditingTeam] = useState<Team | null>(null);
  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);
  
  const [teamFormData, setTeamFormData] = useState({
    team_name: '',
    team_description: '',
  });
  
  // Auto-generated fields
  const [autoGeneratedFields, setAutoGeneratedFields] = useState({
    team_code: '',
    id: '',
  });
  
  // State for Firestore field editing
  const [editingTeamFirestoreFields, setEditingTeamFirestoreFields] = useState(false);
  const [showWarningPopup, setShowWarningPopup] = useState(false);
  const [currentWarningType, setCurrentWarningType] = useState<'team' | 'member'>('team');
  
  // States for change confirmation popup
  const [showChangeConfirmation, setShowChangeConfirmation] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<{type: 'team' | 'member', original: any, updated: any, changes: any[]}>({
    type: 'team',
    original: {},
    updated: {},
    changes: []
  });
  const [pendingSubmitFunction, setPendingSubmitFunction] = useState<(() => void) | null>(null);
  
  // Auto-generate team code and ID from team name
  const generateTeamFields = (teamName: string) => {
    const code = teamName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    const id = `team.${code}`;
    setAutoGeneratedFields({ team_code: code, id });
    return { team_code: code, id };
  };

  // Handle team name change with auto-generation
  const handleTeamNameChange = (name: string) => {
    setTeamFormData({ ...teamFormData, team_name: name });
    
    // Only auto-generate when adding NEW teams, never when editing existing ones
    if (!editingTeam) {
      if (name.trim()) {
        generateTeamFields(name);
      } else {
        setAutoGeneratedFields({ team_code: '', id: '' });
      }
    }
  };

  // Confirm team expert mode
  const confirmTeamExpertMode = () => {
    setEditingTeamFirestoreFields(true);
    setShowWarningPopup(false);
  };

  // Disable team expert mode
  const disableTeamExpertMode = () => {
    if (editingTeamFirestoreFields) {
      setEditingTeamFirestoreFields(false);
      // Restore original auto-generated values
      if (editingTeam) {
        setAutoGeneratedFields({
          team_code: editingTeam.team_code,
          id: editingTeam.id,
        });
      } else if (teamFormData.team_name.trim()) {
        generateTeamFields(teamFormData.team_name);
      }
    }
  };

  // Auto-generate member fields
  const generateMemberFields = (memberName: string, teamCode: string) => {
    const nameForId = memberName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    const id = `member.${teamCode}.${nameForId}`;
    console.log('✨ Generated member fields:', { memberName, teamCode, nameForId, id });
    setMemberAutoGeneratedFields({ id, member_team: teamCode });
    return { id, member_team: teamCode };
  };

  // Handle member name change with auto-generation
  const handleMemberNameChange = (name: string) => {
    setMemberFormData({ ...memberFormData, member_name: name });
    
    // Only auto-generate when adding NEW members, never when editing existing ones
    if (!editingMember && !name.trim()) {
      // Clear auto-generated ID if name is empty and we're adding a new member
      setMemberAutoGeneratedFields(prev => ({
        ...prev,
        id: ''
      }));
    }
  };

  // Handle member team change with auto-generation
  const handleMemberTeamChange = (teamCode: string) => {
    setMemberFormData({ ...memberFormData, member_team: teamCode });
    
    // Only update auto-generated fields when adding NEW members, never when editing existing ones
    if (!editingMember) {
      // Always update member_team in auto-generated fields immediately for new members
      setMemberAutoGeneratedFields(prev => ({
        ...prev,
        member_team: teamCode
      }));
    }
  };

  // Confirm member expert mode
  const confirmMemberExpertMode = () => {
    setEditingMemberFirestoreFields(true);
    setShowWarningPopup(false);
  };

  // Disable member expert mode
  const disableMemberExpertMode = () => {
    if (editingMemberFirestoreFields) {
      setEditingMemberFirestoreFields(false);
      if (editingMember) {
        setMemberAutoGeneratedFields({
          id: editingMember.id || `member_${Date.now()}`,
          member_team: editingMember.member_team || memberFormData.member_team,
        });
      } else if (memberFormData.member_name.trim() && memberFormData.member_team.trim()) {
        generateMemberFields(memberFormData.member_name, memberFormData.member_team);
      }
    }
  };
  
  const [memberFormData, setMemberFormData] = useState({
    member_name: '',
    member_title: '',
    member_summary: '',
    member_summary_short: '',
    member_team: '',
    member_image_link: '',
  });

  // Auto-generated fields for members
  const [memberAutoGeneratedFields, setMemberAutoGeneratedFields] = useState({
    id: '',
    member_team: '',
  });

  // State for member Firestore field editing
  const [editingMemberFirestoreFields, setEditingMemberFirestoreFields] = useState(false);

  const fetchTeams = async () => {
    try {
      console.log('🔍 Fetching teams from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'teams'));
      const items: Team[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as Team);
      });
      items.sort((a, b) => a.order - b.order);
      setTeams(items);
      
      // Auto-select first team if none selected
      if (items.length > 0 && !selectedTeam) {
        setSelectedTeam(items[0]);
      }
    } catch (error) {
      console.error('❌ Error fetching teams:', error);
    }
  };

  const fetchTeamMembers = async () => {
    try {
      console.log('🔍 Fetching team members from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'team_members'));
      const items: TeamMember[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as TeamMember);
      });
      items.sort((a, b) => a.order - b.order);
      setTeamMembers(items);
    } catch (error) {
      console.error('❌ Error fetching team members:', error);
    } finally {
      setLoading(false);
    }
  };

  // Auto-regenerate member fields when name or team changes (ONLY for new members, not edits)
  useEffect(() => {
    if (!editingMember && memberFormData.member_name.trim() && memberFormData.member_team.trim() && !editingMemberFirestoreFields) {
      console.log('🔄 useEffect: Auto-generating member fields for NEW member');
      generateMemberFields(memberFormData.member_name, memberFormData.member_team);
    }
  }, [memberFormData.member_name, memberFormData.member_team, editingMemberFirestoreFields, editingMember]);

  // Filter members based on selected team
  useEffect(() => {
    if (selectedTeam) {
      const filtered = teamMembers.filter(member => 
        member.team === selectedTeam.team_code || 
        member.member_team === selectedTeam.team_code
      );
      setFilteredMembers(filtered);
    }
  }, [selectedTeam, teamMembers]);

  useEffect(() => {
    const loadData = async () => {
      await Promise.all([fetchTeams(), fetchTeamMembers()]);
    };
    loadData();
  }, []);

  // Function to detect and format changes
  const detectChanges = (original: any, updated: any, type: 'team' | 'member') => {
    const changes: any[] = [];
    
    if (type === 'team') {
      if (original.team_name !== updated.team_name) {
        changes.push({
          field: 'Team Name',
          oldValue: original.team_name,
          newValue: updated.team_name
        });
      }
      if (original.team_description !== updated.team_description) {
        changes.push({
          field: 'Team Description',
          oldValue: original.team_description,
          newValue: updated.team_description
        });
      }
    } else {
      if (original.member_name !== updated.member_name) {
        changes.push({
          field: 'Full Name',
          oldValue: original.member_name,
          newValue: updated.member_name
        });
      }
      if (original.member_title !== updated.member_title) {
        changes.push({
          field: 'Title/Position',
          oldValue: original.member_title,
          newValue: updated.member_title
        });
      }
      if (original.member_team !== updated.member_team) {
        changes.push({
          field: 'Team',
          oldValue: original.member_team,
          newValue: updated.member_team
        });
      }
      if (original.member_summary !== updated.member_summary) {
        changes.push({
          field: 'Full Bio',
          oldValue: original.member_summary,
          newValue: updated.member_summary
        });
      }
      if (original.member_summary_short !== updated.member_summary_short) {
        changes.push({
          field: 'Short Bio',
          oldValue: original.member_summary_short,
          newValue: updated.member_summary_short
        });
      }
      if (original.member_image_link !== updated.member_image_link) {
        changes.push({
          field: 'Image URL',
          oldValue: original.member_image_link || 'None',
          newValue: updated.member_image_link || 'None'
        });
      }
    }
    
    return changes;
  };

  // Change confirmation functions
  const confirmChanges = () => {
    if (pendingSubmitFunction) {
      pendingSubmitFunction();
    }
  };

  const cancelChanges = () => {
    setShowChangeConfirmation(false);
    setPendingChanges({
      type: 'team',
      original: {},
      updated: {},
      changes: []
    });
    setPendingSubmitFunction(null);
  };

  const handleTeamSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // If editing, show change confirmation popup
    if (editingTeam) {
      const changes = detectChanges(editingTeam, teamFormData, 'team');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'team',
          original: editingTeam,
          updated: teamFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeTeamUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    }
    
    // If no changes or adding new team, proceed directly
    executeTeamUpdate();
  };

  const executeTeamUpdate = async () => {
    try {
      if (editingTeam) {
        // For updates, ALWAYS use the original team_code and id - NEVER change them!
        await updateDoc(doc(db, 'teams', editingTeam.id), {
          ...teamFormData,
          team_code: editingTeam.team_code, // Keep original team_code
          id: editingTeam.id, // Keep original id
        });
      } else {
        // For new teams, use auto-generated ID as the document ID
        const newOrder = teams.length > 0 ? Math.max(...teams.map(t => t.order)) + 1 : 0;
        const teamData = {
          ...teamFormData,
          team_code: autoGeneratedFields.team_code,
          id: autoGeneratedFields.id,
          order: newOrder,
        };
        
        // Use setDoc with custom document ID instead of addDoc with random ID
        await setDoc(doc(db, 'teams', autoGeneratedFields.id), teamData);
      }
      
      setTeamFormData({ team_name: '', team_description: '' });
      setShowTeamForm(false);
      setEditingTeam(null);
      setAutoGeneratedFields({ team_code: '', id: '' });
      setEditingTeamFirestoreFields(false); // Turn off expert mode after submission
      setShowChangeConfirmation(false); // Close confirmation popup
      fetchTeams();
    } catch (error) {
      console.error('Error saving team:', error);
    }
  };

  // Member CRUD operations
  const handleMemberSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('🚀 Form submitted - editingMember:', editingMember?.id);
    console.log('📝 Form data:', memberFormData);
    
    // If editing, show change confirmation popup
    if (editingMember) {
      const changes = detectChanges(editingMember, memberFormData, 'member');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'member',
          original: editingMember,
          updated: memberFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeMemberUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    }
    
    // If no changes or adding new member, proceed directly
    executeMemberUpdate();
  };

  const executeMemberUpdate = async () => {
    try {
      if (editingMember) {
        // For updates, ALWAYS preserve the original ID and member_team - NEVER change them!
        const memberData = {
          ...memberFormData,
          member_team: editingMember.member_team, // Keep original member_team
          team: editingMember.team || editingMember.member_team, // Keep original team for compatibility
          id: editingMember.id, // Keep original id
        };

        console.log('📝 Updating existing member with preserved IDs:', {
          originalId: editingMember.id,
          originalTeam: editingMember.member_team,
          preservedData: memberData
        });
        
        await updateDoc(doc(db, 'team_members', editingMember.id), memberData);
        console.log('✅ Member updated successfully with preserved IDs');
      } else {
        // For new members, use auto-generated fields
        const memberData = {
          ...memberFormData,
          member_team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
          team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team, // For compatibility
          id: memberAutoGeneratedFields.id,
        };

        console.log('➕ Creating new member with auto-generated ID:', memberData);
        const newOrder = filteredMembers.length > 0 ? Math.max(...filteredMembers.map(m => m.order)) + 1 : 0;
        // Use setDoc with auto-generated ID as document ID
        await setDoc(doc(db, 'team_members', memberAutoGeneratedFields.id), {
          ...memberData,
          order: newOrder,
        });
        console.log('✅ Member created successfully with ID:', memberAutoGeneratedFields.id);
      }
      
      setMemberFormData({
        member_name: '',
        member_title: '',
        member_summary: '',
        member_summary_short: '',
        member_team: '',
        member_image_link: '',
      });
      setMemberAutoGeneratedFields({ id: '', member_team: '' });
      setEditingMemberFirestoreFields(false); // Turn off expert mode after submission
      setShowMemberForm(false);
      setEditingMember(null);
      setShowChangeConfirmation(false); // Close confirmation popup
      fetchTeamMembers();
    } catch (error) {
      console.error('❌ Error saving member:', error);
      alert(`Error saving member: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const handleEditTeam = (team: Team) => {
    disableTeamExpertMode(); // Turn off expert mode when switching teams
    setEditingTeam(team);
    setTeamFormData({
      team_name: team.team_name,
      team_description: team.team_description,
    });
    setAutoGeneratedFields({
      team_code: team.team_code,
      id: team.id,
    });
    setShowTeamForm(true);
  };

  const handleEditMember = (member: TeamMember) => {
    console.log('✏️ Editing member:', member);
    
    disableMemberExpertMode(); // Turn off expert mode when editing member
    setEditingMember(member);
    const formData = {
      member_name: member.name || member.member_name || '',
      member_title: member.title || member.member_title || '',
      member_summary: member.bio || member.member_summary || '',
      member_summary_short: member.bioShort || member.member_summary_short || '',
      member_team: member.team || member.member_team || '',
      member_image_link: member.imageURL || member.member_image_link || '',
    };
    
    console.log('📝 Setting form data:', formData);
    setMemberFormData(formData);
    
    // Set auto-generated fields for editing
    setMemberAutoGeneratedFields({
      id: member.id || `member_${Date.now()}`,
      member_team: member.team || member.member_team || '',
    });
    
    setShowMemberForm(true);
  };

  const handleDeleteMember = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this team member?')) {
      try {
        await deleteDoc(doc(db, 'team_members', id));
        fetchTeamMembers();
      } catch (error) {
        console.error('Error deleting member:', error);
      }
    }
  };

  const handleDeleteTeam = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this team? This will also delete all team members.')) {
      try {
        // First delete all team members
        const membersToDelete = teamMembers.filter(member => 
          (member.member_team === teams.find(t => t.id === id)?.team_code) ||
          (member.team === teams.find(t => t.id === id)?.team_code)
        );
        
        await Promise.all(
          membersToDelete.map(member => deleteDoc(doc(db, 'team_members', member.id)))
        );

        // Then delete the team
        await deleteDoc(doc(db, 'teams', id));
        
        fetchTeams();
        fetchTeamMembers();
        
        // If this was the selected team, clear the selection
        if (selectedTeam?.id === id) {
          setSelectedTeam(null);
          setCurrentView('teams');
        }
      } catch (error) {
        console.error('Error deleting team:', error);
      }
    }
  };

  const handleMemberDragEnd = async (result: DropResult) => {
    if (!result.destination) return;

    const items = Array.from(filteredMembers);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    const updatedItems = items.map((item, index) => ({
      ...item,
      order: index,
    }));

    setFilteredMembers(updatedItems);

    try {
      await Promise.all(
        updatedItems.map((item) =>
          updateDoc(doc(db, 'team_members', item.id), { order: item.order })
        )
      );
    } catch (error) {
      console.error('Error updating member order:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-chieac-primary"></div>
      </div>
    );
  }

  return (
    <div>
      {currentView === 'teams' ? (
        // Teams Overview
        <div>
          <div className="mb-8">
            <div className="bg-gradient-to-r from-orange-600 via-amber-600 to-orange-600 bg-clip-text text-transparent">
              <h1 className="text-4xl font-bold mb-2">Team Management</h1>
            </div>
            <p className="text-slate-400 text-lg">
              Manage teams and team members
            </p>
          </div>

          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold text-white">Teams</h2>
            <button
              onClick={() => {
                disableTeamExpertMode(); // Turn off expert mode when opening new team form
                setShowTeamForm(true);
              }}
              className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
            >
              Add Team
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {teams.map((team) => (
              <div
                key={team.id}
                className="p-6 rounded-xl backdrop-blur-sm border border-slate-700 bg-slate-900/40 hover:border-orange-500/50 hover:bg-slate-800/60 transition-all duration-300 shadow-lg"
              >
                <div className="flex flex-col">
                  <h3 className="font-semibold text-white text-xl mb-2">{team.team_name}</h3>
                  <p className="text-slate-400 text-sm mb-4 flex-1">{team.team_description}</p>
                  
                  <div className="flex gap-2 mt-4">
                    <button
                      onClick={() => {
                        setSelectedTeam(team);
                        setCurrentView('members');
                      }}
                      className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-blue-700 transition-all duration-300"
                    >
                      View Members
                    </button>
                    <button
                      onClick={() => handleEditTeam(team)}
                      className="bg-slate-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteTeam(team.id)}
                      className="bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-all duration-300"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {teams.length === 0 && (
            <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
              <div className="text-lg">No teams found. Add your first team!</div>
            </div>
          )}

          {/* Team editing form */}
          {showTeamForm && (
            <div className="mt-6 p-6 rounded-xl bg-slate-900/60 backdrop-blur-sm border border-orange-600/30 shadow-lg">
              <h3 className="font-semibold text-white text-lg mb-6">
                {editingTeam ? 'Edit Team' : 'Add New Team'}
              </h3>
              <form onSubmit={handleTeamSubmit} className="space-y-6">
                {/* User Editable Fields */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Team Name <span className="text-red-400">*</span></label>
                    <input
                      type="text"
                      value={teamFormData.team_name}
                      onChange={(e) => handleTeamNameChange(e.target.value)}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter team name"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Team Description <span className="text-red-400">*</span></label>
                    <textarea
                      value={teamFormData.team_description}
                      onChange={(e) => setTeamFormData(prev => ({ ...prev, team_description: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter team description"
                      rows={3}
                      required
                    />
                  </div>
                </div>

                {/* Expert Mode Toggle for teams */}
                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                  <div>
                    <div className="font-medium text-slate-300">Expert Mode</div>
                    <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      if (!editingTeamFirestoreFields) {
                        setCurrentWarningType('team');
                        setShowWarningPopup(true);
                      } else {
                        disableTeamExpertMode();
                      }
                    }}
                    className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                      editingTeamFirestoreFields
                        ? 'bg-red-600 text-white hover:bg-red-700'
                        : 'bg-slate-600 text-slate-300 hover:bg-slate-700'
                    }`}
                  >
                    {editingTeamFirestoreFields ? 'Disable Expert Mode' : 'Enable Expert Mode'}
                  </button>
                </div>

                {/* Expert Mode: Firestore Fields */}
                {editingTeamFirestoreFields && (
                  <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
                    <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
                    <div>
                      <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                      <input
                        type="text"
                        value={autoGeneratedFields.team_code}
                        onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, team_code: e.target.value }))}
                        className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="team_code"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                      <input
                        type="text"
                        value={autoGeneratedFields.id}
                        onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, id: e.target.value }))}
                        className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Document ID"
                      />
                    </div>
                  </div>
                )}

                {/* Auto-generated fields display (when expert mode is off) */}
                {!editingTeamFirestoreFields && (
                  <div className="space-y-2 p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                    <h4 className="font-medium text-slate-300 mb-2">Auto-generated Fields:</h4>
                    <div className="text-sm space-y-1">
                      <div><span className="text-slate-400">Team Code:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.team_code}</span></div>
                      <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.id}</span></div>
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button
                    type="submit"
                    className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                  >
                    {editingTeam ? 'Update Team' : 'Create Team'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowTeamForm(false);
                      setEditingTeam(null);
                      setTeamFormData({ team_name: '', team_description: '' });
                    }}
                    className="bg-slate-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>
      ) : (
        // Team Members View
        <div>
          <div className="mb-8">
            <div className="flex items-center gap-4 mb-4">
              <button
                onClick={() => {
                  setCurrentView('teams');
                  setSelectedTeam(null);
                }}
                className="bg-slate-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                ← Back to Teams
              </button>
              <div className="bg-gradient-to-r from-orange-600 via-amber-600 to-orange-600 bg-clip-text text-transparent">
                <h1 className="text-4xl font-bold">Team Members</h1>
              </div>
            </div>
            {selectedTeam && (
              <p className="text-slate-400 text-lg">
                Managing members for: <span className="text-orange-400 font-semibold">{selectedTeam.team_name}</span>
              </p>
            )}
          </div>

          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold text-white">
              Team Members
              {selectedTeam && (
                <span className="text-lg font-normal text-slate-400 ml-2">
                  ({selectedTeam.team_name})
                </span>
              )}
            </h2>
            {selectedTeam && (
              <button
                onClick={() => {
                  disableMemberExpertMode(); // Turn off expert mode when opening new member form
                  // Set default team to current selected team
                  setMemberFormData({
                    member_name: '',
                    member_title: '',
                    member_summary: '',
                    member_summary_short: '',
                    member_team: selectedTeam?.team_code || '',
                    member_image_link: '',
                  });
                  // Initialize auto-generated fields for selected team (empty ID until name is entered)
                  setMemberAutoGeneratedFields({
                    id: '',
                    member_team: selectedTeam?.team_code || '',
                  });
                  setEditingMember(null);
                  setShowMemberForm(true);
                }}
                className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
              >
                Add Member
              </button>
            )}
          </div>

          {!selectedTeam ? (
            <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
              <div className="text-lg">No team selected</div>
            </div>
          ) : (
            <DragDropContext onDragEnd={handleMemberDragEnd}>
              <Droppable droppableId="teamMembers">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className="space-y-3"
                  >
                    {filteredMembers.map((member, index) => (
                      <Draggable key={member.id} draggableId={member.id} index={index}>
                        {(provided) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            className="bg-slate-900/60 backdrop-blur-sm border border-slate-700 rounded-xl p-6 hover:bg-slate-800/60 hover:border-orange-500/50 transition-all duration-300 shadow-lg"
                          >
                            <div className="flex justify-between items-start">
                              <div className="flex items-start space-x-3">
                                {(member.member_image_link || member.imageURL) && (
                                  <img
                                    src={member.member_image_link || member.imageURL}
                                    alt={member.member_name || member.name}
                                    className="w-12 h-12 rounded-full object-cover border-2 border-orange-500/30"
                                  />
                                )}
                                <div className="flex-1">
                                  <h3 className="font-semibold text-white text-lg">
                                    {member.member_name || member.name}
                                  </h3>
                                  <p className="text-orange-400 text-sm font-medium">
                                    {member.member_title || member.title}
                                  </p>
                                  <p className="text-slate-300 text-sm mt-1 leading-relaxed">
                                    {member.member_summary_short || member.bioShort || 'No bio available'}
                                  </p>
                                </div>
                              </div>
                              <div className="flex space-x-2">
                                <button
                                  onClick={() => handleEditMember(member)}
                                  className="text-orange-400 hover:text-orange-300 font-medium transition-colors duration-200"
                                >
                                  Edit
                                </button>
                                <button
                                  onClick={() => handleDeleteMember(member.id)}
                                  className="text-red-400 hover:text-red-300 font-medium transition-colors duration-200"
                                >
                                  Delete
                                </button>
                              </div>
                            </div>
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          )}

          {selectedTeam && filteredMembers.length === 0 && (
            <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
              <div className="text-lg">No members found for this team. Add the first member!</div>
            </div>
          )}

          {/* Member editing form */}
          {showMemberForm && (
            <div className="mt-6 p-6 rounded-xl bg-slate-900/60 backdrop-blur-sm border border-orange-600/30 shadow-lg">
              <h3 className="font-semibold text-white text-lg mb-6">
                {editingMember ? 'Edit Team Member' : 'Add New Team Member'}
              </h3>
              <form onSubmit={handleMemberSubmit} className="space-y-6">
                {/* User Editable Fields */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Member Name <span className="text-red-400">*</span></label>
                    <input
                      type="text"
                      value={memberFormData.member_name}
                      onChange={(e) => handleMemberNameChange(e.target.value)}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter member name"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Title <span className="text-red-400">*</span></label>
                    <input
                      type="text"
                      value={memberFormData.member_title}
                      onChange={(e) => setMemberFormData(prev => ({ ...prev, member_title: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter member title"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Team {editingMember && <span className="text-yellow-400">(Read-only during edit)</span>}</label>
                    {editingMember ? (
                      <input
                        type="text"
                        value={memberFormData.member_team}
                        readOnly
                        className="w-full px-4 py-3 bg-slate-700/50 border border-slate-500 rounded-lg text-slate-300 cursor-not-allowed"
                      />
                    ) : (
                      <select
                        value={memberFormData.member_team}
                        onChange={(e) => handleMemberTeamChange(e.target.value)}
                        className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                        required
                      >
                        <option value="">Select a team</option>
                        {teams.map((team) => (
                          <option key={team.id} value={team.team_code}>
                            {team.team_name} ({team.team_code})
                          </option>
                        ))}
                      </select>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Bio (Full)</label>
                    <textarea
                      value={memberFormData.member_summary}
                      onChange={(e) => setMemberFormData(prev => ({ ...prev, member_summary: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter full bio"
                      rows={4}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Bio (Short)</label>
                    <textarea
                      value={memberFormData.member_summary_short}
                      onChange={(e) => setMemberFormData(prev => ({ ...prev, member_summary_short: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter short bio"
                      rows={2}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Image URL</label>
                    <input
                      type="url"
                      value={memberFormData.member_image_link}
                      onChange={(e) => setMemberFormData(prev => ({ ...prev, member_image_link: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter image URL"
                    />
                  </div>
                </div>

                {/* Expert Mode Toggle for members */}
                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                  <div>
                    <div className="font-medium text-slate-300">Expert Mode</div>
                    <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      if (!editingMemberFirestoreFields) {
                        setCurrentWarningType('member');
                        setShowWarningPopup(true);
                      } else {
                        disableMemberExpertMode();
                      }
                    }}
                    className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                      editingMemberFirestoreFields
                        ? 'bg-red-600 text-white hover:bg-red-700'
                        : 'bg-slate-600 text-slate-300 hover:bg-slate-700'
                    }`}
                  >
                    {editingMemberFirestoreFields ? 'Disable Expert Mode' : 'Enable Expert Mode'}
                  </button>
                </div>

                {/* Expert Mode: Firestore Fields */}
                {editingMemberFirestoreFields && (
                  <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
                    <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
                    <div>
                      <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                      <input
                        type="text"
                        value={memberAutoGeneratedFields.id}
                        onChange={(e) => setMemberAutoGeneratedFields(prev => ({ ...prev, id: e.target.value }))}
                        className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Document ID"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                      <input
                        type="text"
                        value={memberAutoGeneratedFields.member_team}
                        onChange={(e) => setMemberAutoGeneratedFields(prev => ({ ...prev, member_team: e.target.value }))}
                        className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="team_code"
                      />
                    </div>
                  </div>
                )}

                {/* Auto-generated fields display (when expert mode is off) */}
                {!editingMemberFirestoreFields && (
                  <div className="space-y-2 p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                    <h4 className="font-medium text-slate-300 mb-2">Auto-generated Fields:</h4>
                    <div className="text-sm space-y-1">
                      <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{memberAutoGeneratedFields.id}</span></div>
                      <div><span className="text-slate-400">Team:</span> <span className="text-orange-300 font-mono">{memberAutoGeneratedFields.member_team}</span></div>
                    </div>
                  </div>
                )}

                {/* Show editing details when in edit mode */}
                {editingMember && !editingMemberFirestoreFields && (
                  <div className="space-y-2 p-4 bg-blue-900/20 rounded-lg border border-blue-600/30">
                    <h4 className="font-medium text-blue-300 mb-2">Current Member Details:</h4>
                    <div className="text-sm space-y-1">
                      <div><span className="text-slate-400">ID:</span> {editingMember.id}</div>
                      <div><span className="text-slate-400">Team:</span> {editingMember.member_team}</div>
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button
                    type="submit"
                    className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                  >
                    {editingMember ? 'Update Member' : 'Create Member'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowMemberForm(false);
                      setEditingMember(null);
                      setMemberFormData({
                        member_name: '',
                        member_title: '',
                        member_summary: '',
                        member_summary_short: '',
                        member_team: '',
                        member_image_link: '',
                      });
                    }}
                    className="bg-slate-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>
      )}

      {/* Change Confirmation Popup */}
      {showChangeConfirmation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-xl border border-slate-600 max-w-md w-full mx-4">
            <h3 className="text-xl font-semibold text-white mb-4">Confirm Changes</h3>
            <div className="space-y-3 mb-6">
              {pendingChanges.changes.map((change, index) => (
                <div key={index} className="bg-slate-700/50 p-3 rounded-lg">
                  <div className="font-medium text-orange-300">{change.field}:</div>
                  <div className="text-sm text-slate-300">
                    <div><span className="text-red-400">From:</span> {change.oldValue || '(empty)'}</div>
                    <div><span className="text-green-400">To:</span> {change.newValue || '(empty)'}</div>
                  </div>
                </div>
              ))}
            </div>
            <div className="flex space-x-3">
              <button
                onClick={confirmChanges}
                className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300"
              >
                Confirm Changes
              </button>
              <button
                onClick={cancelChanges}
                className="bg-slate-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Expert Mode Warning Popup */}
      {showWarningPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-xl border border-red-600 max-w-md w-full mx-4">
            <h3 className="text-xl font-semibold text-red-400 mb-4">⚠️ Expert Mode Warning</h3>
            <p className="text-slate-300 mb-6">
              You are about to enable expert mode, which allows direct editing of Firestore fields.
              This can break the application if used incorrectly. Are you sure you want to continue?
            </p>
            <div className="flex space-x-3">
              <button
                onClick={currentWarningType === 'team' ? confirmTeamExpertMode : confirmMemberExpertMode}
                className="bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-all duration-300"
              >
                Yes, Enable Expert Mode
              </button>
              <button
                onClick={() => setShowWarningPopup(false)}
                className="bg-slate-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
