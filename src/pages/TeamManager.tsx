//
//  TeamManager.tsx
//  ChiEAC
//
//  Created by Shivaang Kumar on 8/16/25.
//

import { useState, useEffect } from 'react';
import { collection, getDocs, updateDoc, deleteDoc, doc, setDoc } from 'firebase/firestore';
import { DragDropContext, Droppable, Draggable, type DropResult } from '@hello-pangea/dnd';
import { db } from '../config/firebase';
import type { TeamMember } from '../types';

interface Team {
  id: string;
  team_name: string;
  team_code: string;
  team_description: string;
  order: number;
}

export default function TeamManager() {
  const [teams, setTeams] = useState<Team[]>([]);
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  const [filteredMembers, setFilteredMembers] = useState<TeamMember[]>([]);
  const [loading, setLoading] = useState(true);
  
  // View state - 'teams' for teams overview, 'members' for team members view
  const [currentView, setCurrentView] = useState<'teams' | 'members'>('teams');
  
  // Form states
  const [showTeamForm, setShowTeamForm] = useState(false);
  const [showMemberForm, setShowMemberForm] = useState(false);
  const [editingTeam, setEditingTeam] = useState<Team | null>(null);
  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);
  
  const [teamFormData, setTeamFormData] = useState({
    team_name: '',
    team_description: '',
  });
  
  // Auto-generated fields
  const [autoGeneratedFields, setAutoGeneratedFields] = useState({
    team_code: '',
    id: '',
  });
  
  // State for Firestore field editing
  const [editingTeamFirestoreFields, setEditingTeamFirestoreFields] = useState(false);
  const [showWarningPopup, setShowWarningPopup] = useState(false);
  const [currentWarningType, setCurrentWarningType] = useState<'team' | 'member'>('team');
  
  // States for change confirmation popup
  const [showChangeConfirmation, setShowChangeConfirmation] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<{type: 'team' | 'member', original: any, updated: any, changes: any[]}>({
    type: 'team',
    original: {},
    updated: {},
    changes: []
  });
  const [pendingSubmitFunction, setPendingSubmitFunction] = useState<(() => void) | null>(null);
  
  // States for creation confirmation
  const [showCreateConfirmation, setShowCreateConfirmation] = useState(false);
  const [pendingCreation, setPendingCreation] = useState<{type: 'team' | 'member', data: any}>({
    type: 'team',
    data: {}
  });
  
  // States for delete confirmation
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [pendingDeletion, setPendingDeletion] = useState<{team: Team | null, affectedMembers: TeamMember[]}>({
    team: null,
    affectedMembers: []
  });

  // States for member delete confirmation
  const [showMemberDeleteConfirmation, setShowMemberDeleteConfirmation] = useState(false);
  const [pendingMemberDeletion, setPendingMemberDeletion] = useState<TeamMember | null>(null);
  
  // Auto-generate team code and ID from team name
  const generateTeamFields = (teamName: string) => {
    const code = teamName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    const uniqueId = generateUniqueTeamId(teamName);
    setAutoGeneratedFields({ team_code: code, id: uniqueId });
    return { team_code: code, id: uniqueId };
  };

  // Handle team name change with auto-generation
  const handleTeamNameChange = (name: string) => {
    setTeamFormData({ ...teamFormData, team_name: name });
    
    // Only auto-generate when adding NEW teams, never when editing existing ones
    if (!editingTeam) {
      if (name.trim()) {
        generateTeamFields(name);
      } else {
        setAutoGeneratedFields({ team_code: '', id: '' });
      }
    }
  };

  // Confirm team expert mode
  const confirmTeamExpertMode = () => {
    setEditingTeamFirestoreFields(true);
    setShowWarningPopup(false);
  };

  // Disable team expert mode
  const disableTeamExpertMode = () => {
    if (editingTeamFirestoreFields) {
      setEditingTeamFirestoreFields(false);
      // Restore original auto-generated values
      if (editingTeam) {
        setAutoGeneratedFields({
          team_code: editingTeam.team_code,
          id: editingTeam.id,
        });
      } else if (teamFormData.team_name.trim()) {
        generateTeamFields(teamFormData.team_name);
      }
    }
  };

  // Auto-generate member fields
  const generateMemberFields = (memberName: string, teamCode: string) => {
    const uniqueId = generateUniqueMemberId(memberName, teamCode);
    console.log('✨ Generated member fields:', { memberName, teamCode, uniqueId });
    setMemberAutoGeneratedFields({ id: uniqueId, member_team: teamCode });
    return { id: uniqueId, member_team: teamCode };
  };

  // Handle member name change with auto-generation
  const handleMemberNameChange = (name: string) => {
    setMemberFormData({ ...memberFormData, member_name: name });
    
    // Only auto-generate when adding NEW members, never when editing existing ones
    if (!editingMember && !name.trim()) {
      // Clear auto-generated ID if name is empty and we're adding a new member
      setMemberAutoGeneratedFields(prev => ({
        ...prev,
        id: ''
      }));
    }
  };

  // Handle member team change with auto-generation
  const handleMemberTeamChange = (teamCode: string) => {
    setMemberFormData({ ...memberFormData, member_team: teamCode });
    
    // Only update auto-generated fields when adding NEW members, never when editing existing ones
    if (!editingMember) {
      // Always update member_team in auto-generated fields immediately for new members
      setMemberAutoGeneratedFields(prev => ({
        ...prev,
        member_team: teamCode
      }));
    }
  };

  // Confirm member expert mode
  const confirmMemberExpertMode = () => {
    setEditingMemberFirestoreFields(true);
    setShowWarningPopup(false);
  };

  // Disable member expert mode
  const disableMemberExpertMode = () => {
    if (editingMemberFirestoreFields) {
      setEditingMemberFirestoreFields(false);
      if (editingMember) {
        setMemberAutoGeneratedFields({
          id: editingMember.id || `member_${Date.now()}`,
          member_team: editingMember.member_team || memberFormData.member_team,
        });
      } else if (memberFormData.member_name.trim() && memberFormData.member_team.trim()) {
        generateMemberFields(memberFormData.member_name, memberFormData.member_team);
      }
    }
  };
  
  // ID uniqueness validation functions
  const checkTeamIdExists = (id: string): boolean => {
    return teams.some(team => team.id === id);
  };

  const checkMemberIdExists = (id: string): boolean => {
    return teamMembers.some(member => member.id === id);
  };

  const generateUniqueTeamId = (baseName: string): string => {
    const code = baseName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    let baseId = `team.${code}`;
    let uniqueId = baseId;
    let counter = 1;
    
    while (checkTeamIdExists(uniqueId)) {
      uniqueId = `${baseId}_${counter}`;
      counter++;
    }
    
    return uniqueId;
  };

  const generateUniqueMemberId = (memberName: string, teamCode: string): string => {
    const nameForId = memberName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
    let baseId = `member.${teamCode}.${nameForId}`;
    let uniqueId = baseId;
    let counter = 1;
    
    while (checkMemberIdExists(uniqueId)) {
      uniqueId = `${baseId}_${counter}`;
      counter++;
    }
    
    return uniqueId;
  };
  
  // Confirm creation
  const confirmCreation = () => {
    if (pendingCreation.type === 'team') {
      executeTeamCreation();
    } else {
      executeMemberCreation();
    }
    setShowCreateConfirmation(false);
  };

  // Cancel creation
  const cancelCreation = () => {
    setShowCreateConfirmation(false);
    setPendingCreation({ type: 'team', data: {} });
  };
  
  
  
  const [memberFormData, setMemberFormData] = useState({
    member_name: '',
    member_title: '',
    member_summary: '',
    member_summary_short: '',
    member_team: '',
    member_image_link: '',
  });

  // Auto-generated fields for members
  const [memberAutoGeneratedFields, setMemberAutoGeneratedFields] = useState({
    id: '',
    member_team: '',
  });

  // State for member Firestore field editing
  const [editingMemberFirestoreFields, setEditingMemberFirestoreFields] = useState(false);

  // State for member detail view
  const [selectedMemberForView, setSelectedMemberForView] = useState<TeamMember | null>(null);
  const [rightPanelMode, setRightPanelMode] = useState<'view' | 'edit' | null>(null);

  // State for team detail view
  const [selectedTeamForView, setSelectedTeamForView] = useState<Team | null>(null);
  const [teamRightPanelMode, setTeamRightPanelMode] = useState<'view' | 'edit' | null>(null);

  const fetchTeams = async () => {
    try {
      console.log('🔍 Fetching teams from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'teams'));
      const items: Team[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as Team);
      });
      items.sort((a, b) => a.order - b.order);
      setTeams(items);
      
      // Auto-select first team if none selected
      if (items.length > 0 && !selectedTeam) {
        setSelectedTeam(items[0]);
      }
    } catch (error) {
      console.error('❌ Error fetching teams:', error);
    }
  };

  const fetchTeamMembers = async () => {
    try {
      console.log('🔍 Fetching team members from Firestore...');
      const querySnapshot = await getDocs(collection(db, 'team_members'));
      const items: TeamMember[] = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() } as TeamMember);
      });
      items.sort((a, b) => a.order - b.order);
      setTeamMembers(items);
    } catch (error) {
      console.error('❌ Error fetching team members:', error);
    } finally {
      setLoading(false);
    }
  };

  // Auto-regenerate member fields when name or team changes (ONLY for new members, not edits)
  useEffect(() => {
    if (!editingMember && memberFormData.member_name.trim() && memberFormData.member_team.trim() && !editingMemberFirestoreFields) {
      console.log('🔄 useEffect: Auto-generating member fields for NEW member');
      generateMemberFields(memberFormData.member_name, memberFormData.member_team);
    }
  }, [memberFormData.member_name, memberFormData.member_team, editingMemberFirestoreFields, editingMember]);

  // Filter members based on selected team
  useEffect(() => {
    if (selectedTeam) {
      const filtered = teamMembers.filter(member => 
        member.team === selectedTeam.team_code || 
        member.member_team === selectedTeam.team_code
      );
      setFilteredMembers(filtered);
    }
  }, [selectedTeam, teamMembers]);

  useEffect(() => {
    const loadData = async () => {
      await Promise.all([fetchTeams(), fetchTeamMembers()]);
    };
    loadData();
  }, []);

  // Function to detect and format changes
  const detectChanges = (original: any, updated: any, type: 'team' | 'member') => {
    const changes: any[] = [];
    
    if (type === 'team') {
      if (original.team_name !== updated.team_name) {
        changes.push({
          field: 'Team Name',
          oldValue: original.team_name,
          newValue: updated.team_name
        });
      }
      if (original.team_description !== updated.team_description) {
        changes.push({
          field: 'Team Description',
          oldValue: original.team_description,
          newValue: updated.team_description
        });
      }
    } else {
      if (original.member_name !== updated.member_name) {
        changes.push({
          field: 'Full Name',
          oldValue: original.member_name,
          newValue: updated.member_name
        });
      }
      if (original.member_title !== updated.member_title) {
        changes.push({
          field: 'Title/Position',
          oldValue: original.member_title,
          newValue: updated.member_title
        });
      }
      if (original.member_team !== updated.member_team) {
        changes.push({
          field: 'Team',
          oldValue: original.member_team,
          newValue: updated.member_team
        });
      }
      if (original.member_summary !== updated.member_summary) {
        changes.push({
          field: 'Full Bio',
          oldValue: original.member_summary,
          newValue: updated.member_summary
        });
      }
      if (original.member_summary_short !== updated.member_summary_short) {
        changes.push({
          field: 'Short Bio',
          oldValue: original.member_summary_short,
          newValue: updated.member_summary_short
        });
      }
      if (original.member_image_link !== updated.member_image_link) {
        changes.push({
          field: 'Image URL',
          oldValue: original.member_image_link || 'None',
          newValue: updated.member_image_link || 'None'
        });
      }
    }
    
    return changes;
  };

  // Change confirmation functions
  const confirmChanges = () => {
    if (pendingSubmitFunction) {
      pendingSubmitFunction();
    }
  };

  const cancelChanges = () => {
    setShowChangeConfirmation(false);
    setPendingChanges({
      type: 'team',
      original: {},
      updated: {},
      changes: []
    });
    setPendingSubmitFunction(null);
  };

  const handleTeamSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // If editing, show change confirmation popup
    if (editingTeam) {
      const changes = detectChanges(editingTeam, teamFormData, 'team');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'team',
          original: editingTeam,
          updated: teamFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeTeamUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    } else {
      // For new teams, show creation confirmation
      const teamData = {
        ...teamFormData,
        team_code: autoGeneratedFields.team_code,
        id: autoGeneratedFields.id,
      };
      
      setPendingCreation({
        type: 'team',
        data: teamData
      });
      setShowCreateConfirmation(true);
      return;
    }
    
    // If no changes, proceed directly
    executeTeamUpdate();
  };

  const executeTeamUpdate = async () => {
    try {
      if (editingTeam) {
        // For updates, ALWAYS use the original team_code and id - NEVER change them!
        await updateDoc(doc(db, 'teams', editingTeam.id), {
          ...teamFormData,
          team_code: editingTeam.team_code, // Keep original team_code
          id: editingTeam.id, // Keep original id
        });
      } else {
        // For new teams, use auto-generated ID as the document ID
        const newOrder = teams.length > 0 ? Math.max(...teams.map(t => t.order)) + 1 : 0;
        const teamData = {
          ...teamFormData,
          team_code: autoGeneratedFields.team_code,
          id: autoGeneratedFields.id,
          order: newOrder,
        };
        
        // Use setDoc with custom document ID instead of addDoc with random ID
        await setDoc(doc(db, 'teams', autoGeneratedFields.id), teamData);
      }
      
      setTeamFormData({ team_name: '', team_description: '' });
      setShowTeamForm(false);
      setEditingTeam(null);
      setAutoGeneratedFields({ team_code: '', id: '' });
      setEditingTeamFirestoreFields(false); // Turn off expert mode after submission
      setShowChangeConfirmation(false); // Close confirmation popup
      fetchTeams();
    } catch (error) {
      console.error('Error saving team:', error);
    }
  };

  // Execute team creation
  const executeTeamCreation = async () => {
    try {
      const newOrder = teams.length > 0 ? Math.max(...teams.map(t => t.order)) + 1 : 0;
      const teamData = {
        ...pendingCreation.data,
        order: newOrder,
      };
      
      await setDoc(doc(db, 'teams', pendingCreation.data.id), teamData);
      
      setTeamFormData({ team_name: '', team_description: '' });
      setShowTeamForm(false);
      setEditingTeam(null);
      setAutoGeneratedFields({ team_code: '', id: '' });
      setEditingTeamFirestoreFields(false);
      fetchTeams();
    } catch (error) {
      console.error('Error creating team:', error);
    }
  };
  

  // Member CRUD operations
  const handleMemberSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('🚀 Form submitted - editingMember:', editingMember?.id);
    console.log('📝 Form data:', memberFormData);
    
    // If editing, show change confirmation popup
    if (editingMember) {
      const changes = detectChanges(editingMember, memberFormData, 'member');
      
      if (changes.length > 0) {
        setPendingChanges({
          type: 'member',
          original: editingMember,
          updated: memberFormData,
          changes
        });
        setPendingSubmitFunction(() => () => executeMemberUpdate());
        setShowChangeConfirmation(true);
        return;
      }
    } else {
      // For new members, show creation confirmation
      const memberData = {
        ...memberFormData,
        member_team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
        team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
        id: memberAutoGeneratedFields.id,
      };
      
      setPendingCreation({
        type: 'member',
        data: memberData
      });
      setShowCreateConfirmation(true);
      return;
    }
    
    // If no changes, proceed directly
    executeMemberUpdate();
  };

  const executeMemberUpdate = async () => {
    try {
      if (editingMember) {
        // For updates, ALWAYS preserve the original ID and member_team - NEVER change them!
        const memberData = {
          ...memberFormData,
          member_team: editingMember.member_team, // Keep original member_team
          team: editingMember.team || editingMember.member_team, // Keep original team for compatibility
          id: editingMember.id, // Keep original id
        };

        console.log('📝 Updating existing member with preserved IDs:', {
          originalId: editingMember.id,
          originalTeam: editingMember.member_team,
          preservedData: memberData
        });
        
        await updateDoc(doc(db, 'team_members', editingMember.id), memberData);
        console.log('✅ Member updated successfully with preserved IDs');
      } else {
        // For new members, use auto-generated fields
        const memberData = {
          ...memberFormData,
          member_team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team,
          team: memberAutoGeneratedFields.member_team || selectedTeam?.team_code || memberFormData.member_team, // For compatibility
          id: memberAutoGeneratedFields.id,
        };

        console.log('➕ Creating new member with auto-generated ID:', memberData);
        const newOrder = filteredMembers.length > 0 ? Math.max(...filteredMembers.map(m => m.order)) + 1 : 0;
        // Use setDoc with auto-generated ID as document ID
        await setDoc(doc(db, 'team_members', memberAutoGeneratedFields.id), {
          ...memberData,
          order: newOrder,
        });
        console.log('✅ Member created successfully with ID:', memberAutoGeneratedFields.id);
      }
      
      setMemberFormData({
        member_name: '',
        member_title: '',
        member_summary: '',
        member_summary_short: '',
        member_team: '',
        member_image_link: '',
      });
      setMemberAutoGeneratedFields({ id: '', member_team: '' });
      setEditingMemberFirestoreFields(false); // Turn off expert mode after submission
      setShowMemberForm(false);
      
      // Handle view mode transition after update
      if (editingMember && rightPanelMode === 'edit') {
        // After successful update, switch back to view mode
        setRightPanelMode('view');
        setSelectedMemberForView(editingMember);
      } else {
        // For new members or when not in right panel mode, close everything
        setRightPanelMode(null);
        setSelectedMemberForView(null);
      }
      
      setEditingMember(null);
      setShowChangeConfirmation(false); // Close confirmation popup
      fetchTeamMembers();
    } catch (error) {
      console.error('❌ Error saving member:', error);
      alert(`Error saving member: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Execute member creation
  const executeMemberCreation = async () => {
    try {
      const newOrder = filteredMembers.length > 0 ? Math.max(...filteredMembers.map(m => m.order)) + 1 : 0;
      const memberData = {
        ...pendingCreation.data,
        order: newOrder,
      };
      
      await setDoc(doc(db, 'team_members', pendingCreation.data.id), memberData);
      
      setMemberFormData({
        member_name: '',
        member_title: '',
        member_summary: '',
        member_summary_short: '',
        member_team: '',
        member_image_link: '',
      });
      setMemberAutoGeneratedFields({ id: '', member_team: '' });
      setEditingMemberFirestoreFields(false);
      setShowMemberForm(false);
      setEditingMember(null);
      fetchTeamMembers();
    } catch (error) {
      console.error('❌ Error creating member:', error);
      alert(`Error creating member: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };
  

  const handleEditTeam = (team: Team) => {
    disableTeamExpertMode(); // Turn off expert mode when switching teams
    setEditingTeam(team);
    setTeamFormData({
      team_name: team.team_name,
      team_description: team.team_description,
    });
    setAutoGeneratedFields({
      team_code: team.team_code,
      id: team.id,
    });

    // If we're in view mode, switch to edit mode, otherwise open edit form
    if (teamRightPanelMode === 'view') {
      setTeamRightPanelMode('edit');
    } else {
      setSelectedTeamForView(team);
      setTeamRightPanelMode('edit');
    }
    setShowTeamForm(true);
  };

  const handleEditMember = (member: TeamMember) => {
    console.log('✏️ Editing member:', member);
    
    disableMemberExpertMode(); // Turn off expert mode when editing member
    setEditingMember(member);
    const formData = {
      member_name: member.name || member.member_name || '',
      member_title: member.title || member.member_title || '',
      member_summary: member.bio || member.member_summary || '',
      member_summary_short: member.bioShort || member.member_summary_short || '',
      member_team: member.team || member.member_team || '',
      member_image_link: member.imageURL || member.member_image_link || '',
    };
    
    console.log('📝 Setting form data:', formData);
    setMemberFormData(formData);
    
    // Set auto-generated fields for editing
    setMemberAutoGeneratedFields({
      id: member.id || `member_${Date.now()}`,
      member_team: member.team || member.member_team || '',
    });

    // If we're in view mode, switch to edit mode, otherwise open edit form
    if (rightPanelMode === 'view') {
      setRightPanelMode('edit');
    } else {
      setSelectedMemberForView(member);
      setRightPanelMode('edit');
    }
    setShowMemberForm(true);
  };

  // New function to handle member card click (for viewing)
  const handleMemberCardClick = (member: TeamMember) => {
    console.log('👁️ Viewing member:', member);
    setSelectedMemberForView(member);
    setRightPanelMode('view');
    setShowMemberForm(false);
    setEditingMember(null);
  };

  // Function to close the right panel
  const closeRightPanel = () => {
    setSelectedMemberForView(null);
    setRightPanelMode(null);
    setShowMemberForm(false);
    setEditingMember(null);
  };

  // Function to close the team right panel
  const closeTeamRightPanel = () => {
    setSelectedTeamForView(null);
    setTeamRightPanelMode(null);
    setShowTeamForm(false);
    setEditingTeam(null);
  };

  const handleDeleteMember = async (id: string) => {
    const memberToDelete = teamMembers.find(member => member.id === id);
    if (!memberToDelete) return;
    
    setPendingMemberDeletion(memberToDelete);
    setShowMemberDeleteConfirmation(true);
  };

  const confirmMemberDeletion = async () => {
    if (!pendingMemberDeletion) return;
    
    try {
      await deleteDoc(doc(db, 'team_members', pendingMemberDeletion.id));
      
      // Close right panel if the deleted member was being viewed/edited
      if (selectedMemberForView?.id === pendingMemberDeletion.id) {
        closeRightPanel();
      }
      
      fetchTeamMembers();
      setShowMemberDeleteConfirmation(false);
      setPendingMemberDeletion(null);
    } catch (error) {
      console.error('Error deleting member:', error);
      alert(`Error deleting member: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const cancelMemberDeletion = () => {
    setShowMemberDeleteConfirmation(false);
    setPendingMemberDeletion(null);
  };

  const handleDeleteTeam = async (id: string) => {
    // Find the team and affected members
    const teamToDelete = teams.find(t => t.id === id);
    if (!teamToDelete) return;
    
    const affectedMembers = teamMembers.filter(member => 
      (member.member_team === teamToDelete.team_code) ||
      (member.team === teamToDelete.team_code)
    );
    
    // Set up pending deletion and show confirmation dialog
    setPendingDeletion({
      team: teamToDelete,
      affectedMembers: affectedMembers
    });
    setShowDeleteConfirmation(true);
  };

  // Execute the actual deletion
  const executeTeamDeletion = async () => {
    if (!pendingDeletion.team) return;
    
    try {
      // First delete all team members
      await Promise.all(
        pendingDeletion.affectedMembers.map(member => deleteDoc(doc(db, 'team_members', member.id)))
      );

      // Then delete the team
      await deleteDoc(doc(db, 'teams', pendingDeletion.team.id));
      
      fetchTeams();
      fetchTeamMembers();
      
      // If this was the selected team, clear the selection
      if (selectedTeam?.id === pendingDeletion.team.id) {
        setSelectedTeam(null);
        setCurrentView('teams');
      }
      
      // Close dialog and reset state
      setShowDeleteConfirmation(false);
      setPendingDeletion({ team: null, affectedMembers: [] });
    } catch (error) {
      console.error('Error deleting team:', error);
      alert('Error deleting team. Please try again.');
    }
  };

  // Cancel deletion
  const cancelDeletion = () => {
    setShowDeleteConfirmation(false);
    setPendingDeletion({ team: null, affectedMembers: [] });
  };

  const handleMemberDragEnd = async (result: DropResult) => {
    if (!result.destination) return;

    const items = Array.from(filteredMembers);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    const updatedItems = items.map((item, index) => ({
      ...item,
      order: index,
    }));

    setFilteredMembers(updatedItems);

    try {
      await Promise.all(
        updatedItems.map((item) =>
          updateDoc(doc(db, 'team_members', item.id), { order: item.order })
        )
      );
    } catch (error) {
      console.error('Error updating member order:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-chieac-primary"></div>
      </div>
    );
  }

  return (
    <div>
      {currentView === 'teams' ? (
        // Teams Overview
        <div>
          <div className="mb-8">
            <div className="bg-gradient-to-r from-orange-600 via-amber-600 to-orange-600 bg-clip-text text-transparent">
              <h1 className="text-4xl font-bold mb-2">Team Management</h1>
            </div>
            <p className="text-slate-400 text-lg">
              Manage teams and team members
            </p>
          </div>

          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold text-white">Teams</h2>
            <button
              onClick={() => {
                // Reset all form states when opening new team form
                disableTeamExpertMode(); // Turn off expert mode when opening new team form
                setEditingTeam(null); // Clear any existing edit state
                setTeamFormData({ team_name: '', team_description: '' }); // Reset form data
                setAutoGeneratedFields({ team_code: '', id: '' }); // Reset auto fields
                setShowTeamForm(true);
              }}
              className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
            >
              Add Team
            </button>
          </div>

          {/* Main content area with dynamic layout */}
          <div className={`flex gap-6 min-h-[600px] ${selectedTeamForView || teamRightPanelMode ? '' : 'justify-center'}`}>
            {/* Left side: Team cards */}
            <div className={`${selectedTeamForView || teamRightPanelMode ? 'w-[70%]' : 'w-full'} transition-all duration-300`}>
              <div className={`grid grid-cols-1 ${selectedTeamForView || teamRightPanelMode ? 'md:grid-cols-2' : 'md:grid-cols-2 lg:grid-cols-3'} gap-6`}>
                {teams.map((team) => {
                  const isSelected = selectedTeamForView?.id === team.id;
                  return (
                    <div
                      key={team.id}
                      onClick={() => {
                        // Clear any selected member when switching teams
                        setSelectedMemberForView(null);
                        setRightPanelMode(null);
                        setSelectedTeam(team);
                        setCurrentView('members');
                      }}
                      className={`group relative overflow-hidden rounded-2xl backdrop-blur-sm border transition-all duration-300 cursor-pointer transform hover:scale-[1.02] ${
                        isSelected 
                          ? 'border-orange-500/50 shadow-2xl shadow-orange-500/20 bg-gradient-to-br from-slate-900/80 to-slate-800/60' 
                          : 'border-slate-700/50 hover:border-orange-500/40 hover:shadow-2xl hover:shadow-orange-500/15 bg-gradient-to-br from-slate-900/60 to-slate-800/40 hover:-translate-y-1'
                      }`}
                    >
                    {/* Gradient Overlay */}
                    <div className={`absolute inset-0 bg-gradient-to-br transition-all duration-300 ${
                      isSelected 
                        ? 'from-orange-500/10 to-amber-500/10 opacity-100' 
                        : 'from-orange-500/5 to-amber-500/5 opacity-0 group-hover:opacity-100'
                    }`}></div>

                {/* Content */}
                <div className="relative p-8 h-full flex flex-col">
                  {/* Header Section */}
                  <div className="mb-6">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="font-bold text-white text-2xl leading-tight group-hover:text-orange-100 transition-colors duration-300">
                            {team.team_name}
                          </h3>
                          {/* Permanent arrow indicator */}
                          <svg className="w-5 h-5 text-orange-400 opacity-60 group-hover:opacity-100 group-hover:text-orange-300 transition-all duration-300 transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                          </svg>
                        </div>
                        {/* Permanent action hint */}
                        <p className="text-orange-300/70 text-sm font-medium group-hover:text-orange-300 transition-colors duration-300">
                          Click to view members
                        </p>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {/* Member Count Capsule */}
                        <div className="bg-gradient-to-r from-orange-500/20 to-amber-500/20 backdrop-blur-sm border border-orange-500/30 rounded-full px-3 py-1.5 flex items-center gap-1.5 group-hover:border-orange-400/50 group-hover:from-orange-500/30 group-hover:to-amber-500/30 transition-all duration-300">
                          <svg className="w-3 h-3 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                          <span className="text-orange-300 text-xs font-medium group-hover:text-orange-200 transition-colors duration-300">
                            {teamMembers.filter(member => member.member_team === team.team_code || member.team === team.team_code).length} Members
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="w-16 h-0.5 bg-gradient-to-r from-orange-500 to-amber-500 rounded-full group-hover:w-24 transition-all duration-300"></div>
                  </div>

                  {/* Description Section */}
                  <div className="flex-1 mb-6">
                    <p className="text-slate-300 text-sm leading-relaxed overflow-hidden group-hover:text-slate-200 transition-colors duration-300" 
                       style={{
                         display: '-webkit-box',
                         WebkitLineClamp: 3,
                         WebkitBoxOrient: 'vertical'
                       }}>
                      {team.team_description}
                    </p>
                  </div>

                  {/* Action Button - Only View Team Details */}
                  <div className="mt-auto" onClick={(e) => e.stopPropagation()}>
                    <button
                      onClick={() => {
                        setSelectedTeamForView(team);
                        setTeamRightPanelMode('view');
                      }}
                      className="w-full bg-slate-700/80 backdrop-blur-sm text-slate-200 px-6 py-3 rounded-xl font-semibold hover:bg-slate-600/80 hover:text-white transition-all duration-300 border border-slate-600/50 hover:border-slate-500/50 relative overflow-hidden"
                    >
                      {/* Button hover effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-orange-500/10 to-amber-500/10 opacity-0 hover:opacity-100 transition-opacity duration-300"></div>
                      <span className="relative flex items-center justify-center gap-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                        View Team Details
                      </span>
                    </button>
                  </div>
                </div>
              </div>
                  );
                })}
              </div>
            </div>

            {/* Right side: Team details view or Edit form (30%) */}
            {(selectedTeamForView || teamRightPanelMode) && (
              <div className="w-[30%]">
                {teamRightPanelMode === 'view' && selectedTeamForView && (
                  <div className="p-6 rounded-xl bg-gradient-to-br from-slate-900/80 to-slate-800/60 backdrop-blur-sm border border-orange-500/50 shadow-2xl shadow-orange-500/20 sticky top-6">
                    {/* Gradient Overlay */}
                    <div className="absolute inset-0 bg-gradient-to-br from-orange-500/10 to-amber-500/10 rounded-xl"></div>
                    
                    <div className="relative z-10">
                      <div className="flex justify-between items-start mb-6">
                        <h3 className="font-semibold text-white text-lg">Team Details</h3>
                        <button
                          onClick={closeTeamRightPanel}
                          className="text-slate-400 hover:text-white transition-colors duration-200"
                        >
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                      
                      {/* Team Information */}
                      <div className="space-y-4">
                        <div>
                          <h4 className="font-semibold text-white text-xl text-center mb-2">
                            {selectedTeamForView.team_name}
                          </h4>
                        </div>
                        
                        <div className="bg-slate-800/50 rounded-lg p-4">
                          <h5 className="font-medium text-slate-300 mb-2">Description</h5>
                          <p className="text-orange-300 font-mono text-sm">
                            {selectedTeamForView.team_description || 'No description available'}
                          </p>
                        </div>
                        
                        <div className="bg-slate-800/50 rounded-lg p-4">
                          <h5 className="font-medium text-slate-300 mb-2">Team Code</h5>
                          <p className="text-orange-300 font-mono text-sm">
                            {selectedTeamForView.team_code}
                          </p>
                        </div>
                        
                        <div className="bg-slate-800/50 rounded-lg p-4">
                          <h5 className="font-medium text-slate-300 mb-2">Team ID</h5>
                          <p className="text-orange-300 font-mono text-sm">
                            {selectedTeamForView.id}
                          </p>
                        </div>

                        <div className="bg-slate-800/50 rounded-lg p-4">
                          <h5 className="font-medium text-slate-300 mb-2">Members</h5>
                          <p className="text-orange-300 font-mono text-sm">
                            {teamMembers.filter(member => member.member_team === selectedTeamForView.team_code || member.team === selectedTeamForView.team_code).length} members
                          </p>
                        </div>
                      </div>
                      
                      {/* Action Buttons */}
                      <div className="space-y-3 mt-6">
                        {/* View Members Button - Top */}
                        <button
                          onClick={() => {
                            // Clear any selected member when switching teams
                            setSelectedMemberForView(null);
                            setRightPanelMode(null);
                            setSelectedTeam(selectedTeamForView);
                            setCurrentView('members');
                          }}
                          className="w-full bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                        >
                          <span className="flex items-center justify-center gap-2">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                            </svg>
                            View Members
                          </span>
                        </button>
                        
                        {/* Edit and Delete Buttons - Bottom Row */}
                        <div className="flex space-x-3">
                          <button
                            onClick={() => handleEditTeam(selectedTeamForView)}
                            className="flex-1 bg-slate-700/80 backdrop-blur-sm text-slate-200 px-4 py-2.5 rounded-lg font-medium hover:bg-slate-600/80 hover:text-white transition-all duration-300 border border-slate-600/50 hover:border-slate-500/50"
                          >
                            <span className="flex items-center justify-center gap-2">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                              Edit Team
                            </span>
                          </button>
                          <button
                            onClick={() => handleDeleteTeam(selectedTeamForView.id)}
                            className="flex-1 bg-red-600/20 backdrop-blur-sm text-red-400 px-4 py-2.5 rounded-lg font-medium hover:bg-red-600/30 hover:text-red-300 transition-all duration-300 border border-red-600/30 hover:border-red-500/50"
                          >
                            <span className="flex items-center justify-center gap-2">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                              Delete Team
                            </span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {teamRightPanelMode === 'edit' && showTeamForm && (
                  <div className="p-6 rounded-xl bg-gradient-to-br from-slate-900/80 to-slate-800/60 backdrop-blur-sm border border-orange-500/50 shadow-2xl shadow-orange-500/20 sticky top-6">
                    {/* Gradient Overlay */}
                    <div className="absolute inset-0 bg-gradient-to-br from-orange-500/10 to-amber-500/10 rounded-xl"></div>
                    
                    <div className="relative z-10">
                      <div className="flex justify-between items-start mb-6">
                      <h3 className="font-semibold text-white text-lg">
                        {editingTeam ? 'Edit Team' : 'Add New Team'}
                      </h3>
                      <button
                        onClick={closeTeamRightPanel}
                        className="text-slate-400 hover:text-white transition-colors duration-200"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <form onSubmit={handleTeamSubmit} className="space-y-6">
                {/* User Editable Fields */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Team Name <span className="text-red-400">*</span></label>
                    <input
                      type="text"
                      value={teamFormData.team_name}
                      onChange={(e) => handleTeamNameChange(e.target.value)}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter team name"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Team Description <span className="text-red-400">*</span></label>
                    <textarea
                      value={teamFormData.team_description}
                      onChange={(e) => setTeamFormData(prev => ({ ...prev, team_description: e.target.value }))}
                      className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                      placeholder="Enter team description"
                      rows={3}
                      required
                    />
                  </div>
                </div>

                {/* Unified Firestore DB Fields Section for teams - ONLY when adding new teams */}
                {!editingTeam && (
                  <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <div className="font-medium text-slate-300">Expert Mode</div>
                        <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          if (!editingTeamFirestoreFields) {
                            setCurrentWarningType('team');
                            setShowWarningPopup(true);
                          } else {
                            disableTeamExpertMode();
                          }
                        }}
                        className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                          editingTeamFirestoreFields
                            ? 'bg-red-600 text-white hover:bg-red-700'
                            : 'bg-slate-600 text-slate-300 hover:bg-slate-700'
                        }`}
                      >
                        {editingTeamFirestoreFields ? 'Back to Safe Mode' : 'Enable Expert Mode'}
                      </button>
                    </div>

                    {/* Expert Mode: Editable Firestore Fields */}
                    {editingTeamFirestoreFields ? (
                      <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
                        <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
                        <div>
                          <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                          <input
                            type="text"
                            value={autoGeneratedFields.team_code}
                            onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, team_code: e.target.value }))}
                            className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                            placeholder="team_code"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                          <input
                            type="text"
                            value={autoGeneratedFields.id}
                            onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, id: e.target.value }))}
                            className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                            placeholder="Document ID"
                          />
                        </div>
                      </div>
                    ) : (
                      /* Safe Mode: Read-only Firestore Fields Display */
                      <div className="space-y-2">
                        <h4 className="font-medium text-slate-300 mb-2">Firestore DB Fields:</h4>
                        <div className="text-sm space-y-1">
                          <div><span className="text-slate-400">Team Code:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.team_code}</span></div>
                          <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.id}</span></div>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Firestore DB Fields section for editing teams */}
                {editingTeam && (
                  <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                    <div className="space-y-2">
                      <h4 className="font-medium text-slate-300 mb-2">Firestore DB Fields:</h4>
                      <div className="text-sm space-y-1">
                        <div><span className="text-slate-400">Team Code:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.team_code}</span></div>
                        <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{autoGeneratedFields.id}</span></div>
                      </div>
                      <p className="text-xs text-slate-400 mt-2">
                        These fields are read-only during edit to maintain data integrity.
                      </p>
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button
                    type="submit"
                    className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                  >
                    {editingTeam ? 'Update Team' : 'Create Team'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowTeamForm(false);
                      setEditingTeam(null);
                      setTeamFormData({ team_name: '', team_description: '' });
                    }}
                    className="bg-slate-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                  >
                    Cancel
                  </button>
                </div>
              </form>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Show empty state and original team form when no team is selected for viewing */}
            {!selectedTeamForView && !teamRightPanelMode && (
              <>
                {teams.length === 0 && (
                  <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
                    <div className="text-lg">No teams found. Add your first team!</div>
                  </div>
                )}

                {/* Team editing form */}
                {showTeamForm && (
                  <div className="mt-6 p-6 rounded-xl bg-slate-900/60 backdrop-blur-sm border border-orange-600/30 shadow-lg">
                    <h3 className="font-semibold text-white text-lg mb-6">
                      {editingTeam ? 'Edit Team' : 'Add New Team'}
                    </h3>
                    <form onSubmit={handleTeamSubmit} className="space-y-6">
                      {/* User Editable Fields */}
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-slate-300 mb-2">Team Name <span className="text-red-400">*</span></label>
                          <input
                            type="text"
                            value={teamFormData.team_name}
                            onChange={(e) => handleTeamNameChange(e.target.value)}
                            className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                            placeholder="Enter team name"
                            required
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-slate-300 mb-2">Team Description <span className="text-red-400">*</span></label>
                          <textarea
                            value={teamFormData.team_description}
                            onChange={(e) => setTeamFormData(prev => ({ ...prev, team_description: e.target.value }))}
                            className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                            placeholder="Enter team description"
                            rows={4}
                            required
                          />
                        </div>
                      </div>

                      {/* Unified Firestore DB Fields Section */}
                      <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                        {/* Expert Mode Toggle - ONLY when adding new teams */}
                        {!editingTeam && (
                          <div className="flex items-center justify-between mb-4">
                            <div>
                              <div className="font-medium text-slate-300">Expert Mode</div>
                              <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
                            </div>
                            <button
                              type="button"
                              onClick={() => {
                                if (!editingTeamFirestoreFields) {
                                  setCurrentWarningType('team');
                                  setShowWarningPopup(true);
                                } else {
                                  disableTeamExpertMode();
                                }
                              }}
                              className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                                editingTeamFirestoreFields
                                  ? 'bg-red-600 text-white hover:bg-red-700'
                                  : 'bg-slate-600 text-slate-300 hover:bg-slate-700'
                              }`}
                            >
                              {editingTeamFirestoreFields ? 'Back to Safe Mode' : 'Enable Expert Mode'}
                            </button>
                          </div>
                        )}

                        {/* Expert Mode: Editable Firestore Fields */}
                        {!editingTeam && editingTeamFirestoreFields ? (
                          <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
                            <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
                            <div>
                              <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                              <input
                                type="text"
                                value={autoGeneratedFields.team_code}
                                onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, team_code: e.target.value }))}
                                className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                placeholder="team_code"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                              <input
                                type="text"
                                value={autoGeneratedFields.id}
                                onChange={(e) => setAutoGeneratedFields(prev => ({ ...prev, id: e.target.value }))}
                                className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                placeholder="Document ID"
                              />
                            </div>
                          </div>
                        ) : (
                          /* Safe Mode: Read-only Firestore Fields Display */
                          <div className="space-y-2">
                            <h4 className="font-medium text-slate-300 mb-2">Firestore DB Fields:</h4>
                            <div className="text-sm space-y-1">
                              <div><span className="text-slate-400">Team Code:</span> <span className="text-orange-300 font-mono">{editingTeam ? editingTeam.team_code : autoGeneratedFields.team_code}</span></div>
                              <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{editingTeam ? editingTeam.id : autoGeneratedFields.id}</span></div>
                            </div>
                          </div>
                        )}
                      </div>

                      <div className="flex space-x-3">
                        <button
                          type="submit"
                          className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                        >
                          {editingTeam ? 'Update Team' : 'Create Team'}
                        </button>
                        <button
                          type="button"
                          onClick={() => {
                            setShowTeamForm(false);
                            setEditingTeam(null);
                            setTeamFormData({ team_name: '', team_description: '' });
                          }}
                          className="bg-slate-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                        >
                          Cancel
                        </button>
                      </div>
                    </form>
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      ) : (
        // Team Members View
        <div>
          {/* Professional Header Section */}
          <div className="bg-gradient-to-r from-slate-800/80 to-slate-900/80 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6 shadow-xl mb-8">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    // Clear member selection when going back to teams
                    setSelectedMemberForView(null);
                    setRightPanelMode(null);
                    setCurrentView('teams');
                    setSelectedTeam(null);
                  }}
                  className="flex items-center space-x-2 bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 border border-slate-600"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  <span>Teams</span>
                </button>
                
                <div className="h-8 w-px bg-slate-600"></div>
                
                <div>
                  <h1 className="text-3xl font-bold bg-gradient-to-r from-orange-400 via-amber-400 to-orange-400 bg-clip-text text-transparent">
                    {selectedTeam?.team_name || 'Team Members'}
                  </h1>
                  <p className="text-slate-400 text-sm mt-1">
                    {filteredMembers.length} {filteredMembers.length === 1 ? 'member' : 'members'}
                  </p>
                </div>
              </div>
              
              {selectedTeam && (
                <button
                  onClick={() => {
                    disableMemberExpertMode(); // Turn off expert mode when opening new member form
                    // Set default team to current selected team
                    setMemberFormData({
                      member_name: '',
                      member_title: '',
                      member_summary: '',
                      member_summary_short: '',
                      member_team: selectedTeam?.team_code || '',
                      member_image_link: '',
                    });
                    // Initialize auto-generated fields for selected team (empty ID until name is entered)
                    setMemberAutoGeneratedFields({
                      id: '',
                      member_team: selectedTeam?.team_code || '',
                    });
                    setEditingMember(null);
                    setShowMemberForm(true);
                  }}
                  className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-3 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25 flex items-center space-x-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <span>Add Member</span>
                </button>
              )}
            </div>
          </div>

          {/* Main content area with dynamic layout */}
          <div className={`flex gap-6 min-h-[600px] ${selectedMemberForView || rightPanelMode ? '' : 'justify-center'}`}>
            {/* Left side: Member cards */}
            <div className={`${selectedMemberForView || rightPanelMode ? 'w-[60%]' : 'w-full max-w-4xl'} transition-all duration-300`}>

          {!selectedTeam ? (
            <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
              <div className="text-lg">No team selected</div>
            </div>
          ) : (
            <DragDropContext onDragEnd={handleMemberDragEnd}>
              <Droppable droppableId="teamMembers">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className="space-y-3"
                  >
                    {filteredMembers.map((member, index) => {
                      const isSelected = selectedMemberForView?.id === member.id;
                      return (
                        <Draggable key={member.id} draggableId={member.id} index={index}>
                          {(provided) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              onClick={() => handleMemberCardClick(member)}
                              className={`group relative backdrop-blur-sm border rounded-xl p-6 transition-all duration-300 shadow-lg cursor-pointer ${
                                isSelected 
                                  ? 'bg-slate-900/80 border-orange-500/50 shadow-2xl shadow-orange-500/20' 
                                  : 'bg-slate-900/60 border-slate-700 hover:bg-slate-800/60 hover:border-orange-500/50 hover:shadow-xl'
                              }`}
                            >
                              {/* Gradient Overlay for selected state */}
                              {isSelected && (
                                <div className="absolute inset-0 bg-gradient-to-br from-orange-500/10 to-amber-500/10 rounded-xl pointer-events-none"></div>
                              )}
                              
                              {/* Subtle clickable indicator - top right */}
                              <div className="absolute top-4 right-4 opacity-40 group-hover:opacity-100 transition-all duration-300 transform group-hover:translate-x-1">
                                <svg className="w-4 h-4 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                              </div>
                              
                              <div className="relative z-10">
                                <div className="flex items-start space-x-3 pr-8">
                                  {(member.member_image_link || member.imageURL) && (
                                    <img
                                      src={member.member_image_link || member.imageURL}
                                      alt={member.member_name || member.name}
                                      className="w-12 h-12 rounded-full object-cover border-2 border-orange-500/30"
                                    />
                                  )}
                                  <div className="flex-1">
                                    <h3 className="font-semibold text-white text-lg group-hover:text-orange-100 transition-colors duration-300">
                                      {member.member_name || member.name}
                                    </h3>
                                    <p className="text-orange-400 text-sm font-medium">
                                      {member.member_title || member.title}
                                    </p>
                                    <p className="text-slate-300 text-sm mt-1 leading-relaxed group-hover:text-slate-200 transition-colors duration-300">
                                      {member.member_summary_short || member.bioShort || 'No bio available'}
                                    </p>
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                        </Draggable>
                      );
                    })}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          )}

          {selectedTeam && filteredMembers.length === 0 && (
            <div className="text-center py-12 text-slate-400 bg-slate-900/40 rounded-xl backdrop-blur-sm border border-slate-700">
              <div className="text-lg">No members found for this team. Add the first member!</div>
            </div>
          )}
            </div>

            {/* Right side: Member details view or Edit form (40%) */}
            {(selectedMemberForView || rightPanelMode) && (
              <div className="w-[40%]">
                {rightPanelMode === 'view' && selectedMemberForView && (
                  <div className="p-6 rounded-xl bg-slate-900/60 backdrop-blur-sm border border-slate-700 shadow-lg sticky top-6">
                    <div className="flex justify-between items-start mb-6">
                      <h3 className="font-semibold text-white text-lg">Member Details</h3>
                      <button
                        onClick={closeRightPanel}
                        className="text-slate-400 hover:text-white transition-colors duration-200"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    
                    {/* Member Image */}
                    {(selectedMemberForView.member_image_link || selectedMemberForView.imageURL) && (
                      <div className="flex justify-center mb-6">
                        <img
                          src={selectedMemberForView.member_image_link || selectedMemberForView.imageURL}
                          alt={selectedMemberForView.member_name || selectedMemberForView.name}
                          className="w-32 h-32 rounded-full object-cover border-4 border-orange-500/30"
                        />
                      </div>
                    )}
                    
                    {/* Member Information */}
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-semibold text-white text-xl text-center mb-2">
                          {selectedMemberForView.member_name || selectedMemberForView.name}
                        </h4>
                        <p className="text-orange-400 text-lg font-medium text-center">
                          {selectedMemberForView.member_title || selectedMemberForView.title}
                        </p>
                      </div>
                      
                      <div className="bg-slate-800/50 rounded-lg p-4">
                        <h5 className="font-medium text-slate-300 mb-2">Member Description</h5>
                        <p className="text-orange-300 font-mono text-sm">
                          {selectedMemberForView.member_summary || selectedMemberForView.bio || 'No description available'}
                        </p>
                      </div>
                      
                      <div className="bg-slate-800/50 rounded-lg p-4">
                        <h5 className="font-medium text-slate-300 mb-2">Member Description Summary</h5>
                        <p className="text-orange-300 font-mono text-sm">
                          {selectedMemberForView.member_summary_short || selectedMemberForView.bioShort || 'No summary available'}
                        </p>
                      </div>
                      
                      <div className="bg-slate-800/50 rounded-lg p-4">
                        <h5 className="font-medium text-slate-300 mb-2">Member Image Source</h5>
                        <a 
                          href={selectedMemberForView.member_image_link || selectedMemberForView.imageURL} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-orange-300 font-mono text-sm hover:text-orange-200 hover:underline transition-colors duration-200"
                        >
                          {selectedMemberForView.member_image_link || selectedMemberForView.imageURL || 'No image source available'}
                        </a>
                      </div>
                      
                      <div className="bg-slate-800/50 rounded-lg p-4">
                        <h5 className="font-medium text-slate-300 mb-2">Team</h5>
                        <p className="text-orange-300 font-mono text-sm">
                          {selectedMemberForView.member_team || selectedMemberForView.team}
                        </p>
                      </div>
                      
                      <div className="bg-slate-800/50 rounded-lg p-4">
                        <h5 className="font-medium text-slate-300 mb-2">ID</h5>
                        <p className="text-orange-300 font-mono text-sm">
                          {selectedMemberForView.id}
                        </p>
                      </div>
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="flex space-x-3 mt-6">
                      <button
                        onClick={() => handleEditMember(selectedMemberForView)}
                        className="flex-1 bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                      >
                        Edit Member
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteMember(selectedMemberForView.id);
                        }}
                        className="flex-1 bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-all duration-300"
                      >
                        Delete Member
                      </button>
                    </div>
                  </div>
                )}

                {rightPanelMode === 'edit' && showMemberForm && (
                  <div className="p-6 rounded-xl bg-slate-900/60 backdrop-blur-sm border border-orange-600/30 shadow-lg sticky top-6">
                    <div className="flex justify-between items-start mb-6">
                      <h3 className="font-semibold text-white text-lg">
                        {editingMember ? 'Edit Team Member' : 'Add New Team Member'}
                      </h3>
                      <button
                        onClick={closeRightPanel}
                        className="text-slate-400 hover:text-white transition-colors duration-200"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <form onSubmit={handleMemberSubmit} className="space-y-6">
                    {/* User Editable Fields */}
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Member Name <span className="text-red-400">*</span></label>
                        <input
                          type="text"
                          value={memberFormData.member_name}
                          onChange={(e) => handleMemberNameChange(e.target.value)}
                          className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                          placeholder="Enter member name"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Title <span className="text-red-400">*</span></label>
                        <input
                          type="text"
                          value={memberFormData.member_title}
                          onChange={(e) => setMemberFormData(prev => ({ ...prev, member_title: e.target.value }))}
                          className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                          placeholder="Enter member title"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Team {editingMember && <span className="text-yellow-400">(Read-only)</span>}</label>
                        {editingMember ? (
                          <input
                            type="text"
                            value={memberFormData.member_team}
                            readOnly
                            className="w-full px-4 py-3 bg-slate-700/50 border border-slate-500 rounded-lg text-slate-300 cursor-not-allowed"
                          />
                        ) : (
                          <select
                            value={memberFormData.member_team}
                            onChange={(e) => handleMemberTeamChange(e.target.value)}
                            className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                            required
                          >
                            <option value="">Select a team</option>
                            {teams.map((team) => (
                              <option key={team.id} value={team.team_code}>
                                {team.team_name} ({team.team_code})
                              </option>
                            ))}
                          </select>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Member Description (Full) <span className="text-red-400">*</span></label>
                        <textarea
                          value={memberFormData.member_summary}
                          onChange={(e) => setMemberFormData(prev => ({ ...prev, member_summary: e.target.value }))}
                          className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                          placeholder="Enter full member description"
                          rows={4}
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Member Description Summary (~20, max 25 words) <span className="text-red-400">*</span></label>
                        <textarea
                          value={memberFormData.member_summary_short}
                          onChange={(e) => setMemberFormData(prev => ({ ...prev, member_summary_short: e.target.value }))}
                          className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                          placeholder="Enter short member description summary"
                          rows={2}
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-slate-300 mb-2">Image URL <span className="text-red-400">*</span></label>
                        <input
                          type="url"
                          value={memberFormData.member_image_link}
                          onChange={(e) => setMemberFormData(prev => ({ ...prev, member_image_link: e.target.value }))}
                          className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                          placeholder="Enter image URL"
                          required
                        />
                      </div>
                    </div>

                    {/* Unified Firestore DB Fields Section for members */}
                    <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-600">
                      {/* Expert Mode Toggle - ONLY when adding new members */}
                      {!editingMember && (
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <div className="font-medium text-slate-300">Expert Mode</div>
                            <div className="text-sm text-slate-400">Edit Firestore fields directly (Advanced)</div>
                          </div>
                          <button
                            type="button"
                            onClick={() => {
                              if (!editingMemberFirestoreFields) {
                                setCurrentWarningType('member');
                                setShowWarningPopup(true);
                              } else {
                                disableMemberExpertMode();
                              }
                            }}
                            className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                              editingMemberFirestoreFields
                                ? 'bg-red-600 text-white hover:bg-red-700'
                                : 'bg-slate-600 text-slate-300 hover:bg-slate-700'
                            }`}
                          >
                            {editingMemberFirestoreFields ? 'Back to Safe Mode' : 'Enable Expert Mode'}
                          </button>
                        </div>
                      )}

                      {/* Expert Mode: Editable Firestore Fields */}
                      {!editingMember && editingMemberFirestoreFields ? (
                        <div className="space-y-4 p-4 bg-red-900/20 rounded-lg border border-red-600/30">
                          <h4 className="font-medium text-red-400 mb-2">⚠️ Firestore Fields (Expert Mode)</h4>
                          <div>
                            <label className="block text-sm font-medium text-slate-300 mb-2">Document ID</label>
                            <input
                              type="text"
                              value={memberAutoGeneratedFields.id}
                              onChange={(e) => setMemberAutoGeneratedFields(prev => ({ ...prev, id: e.target.value }))}
                              className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                              placeholder="Document ID"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-slate-300 mb-2">Team Code</label>
                            <input
                              type="text"
                              value={memberAutoGeneratedFields.member_team}
                              onChange={(e) => setMemberAutoGeneratedFields(prev => ({ ...prev, member_team: e.target.value }))}
                              className="w-full px-4 py-3 bg-slate-800/50 border border-red-500 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                              placeholder="team_code"
                            />
                          </div>
                        </div>
                      ) : (
                        /* Safe Mode: Read-only Firestore Fields Display */
                        <div className="space-y-2">
                          <h4 className="font-medium text-slate-300 mb-2">Firestore DB Fields:</h4>
                          <div className="text-sm space-y-1">
                            <div><span className="text-slate-400">ID:</span> <span className="text-orange-300 font-mono">{editingMember ? editingMember.id : memberAutoGeneratedFields.id}</span></div>
                            <div><span className="text-slate-400">Team:</span> <span className="text-orange-300 font-mono">{editingMember ? editingMember.member_team : memberAutoGeneratedFields.member_team}</span></div>
                          </div>
                        </div>
                      )}
                    </div>

                    <div className="flex space-x-3">
                      <button
                        type="submit"
                        className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300 shadow-lg hover:shadow-orange-500/25"
                      >
                        {editingMember ? 'Update Member' : 'Create Member'}
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          setShowMemberForm(false);
                          setEditingMember(null);
                          setMemberFormData({
                            member_name: '',
                            member_title: '',
                            member_summary: '',
                            member_summary_short: '',
                            member_team: '',
                            member_image_link: '',
                          });
                        }}
                        className="bg-slate-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
                      >
                        Cancel
                      </button>
                    </div>
                  </form>
                </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Professional Change Confirmation */}
      {showChangeConfirmation && (
        <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg border border-orange-500/30 max-w-md w-full mx-4 shadow-xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-200">Publish Changes</h3>
            </div>
            
            <p className="text-slate-300 text-sm mb-4">
              Are you sure you want to publish these changes? This will update the database immediately.
            </p>
            
            <div className="space-y-3 mb-6">
              {pendingChanges.changes.map((change, index) => (
                <div key={index} className="bg-slate-700/50 p-3 rounded-lg border border-slate-600/50">
                  <div className="font-medium text-orange-300 text-sm">{change.field}:</div>
                  <div className="text-sm text-slate-300 mt-1">
                    <div><span className="text-red-400">From:</span> {change.oldValue || '(empty)'}</div>
                    <div><span className="text-green-400">To:</span> {change.newValue || '(empty)'}</div>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={cancelChanges}
                className="flex-1 bg-slate-600 text-slate-200 px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
              <button
                onClick={confirmChanges}
                className="flex-1 bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-all duration-300"
              >
                Publish Changes
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Professional Creation Confirmation */}
      {showCreateConfirmation && (
        <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg border border-orange-500/30 max-w-md w-full mx-4 shadow-xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-green-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-200">
                Create New {pendingCreation.type === 'team' ? 'Team' : 'Team Member'}
              </h3>
            </div>
            
            <p className="text-slate-300 text-sm mb-4">
              Are you sure you want to create this {pendingCreation.type === 'team' ? 'team' : 'team member'}? 
              This will be published to the database immediately.
            </p>
            
            <div className="bg-slate-700/50 p-4 rounded-lg border border-slate-600/50 mb-6">
              <h4 className="font-medium text-orange-300 text-sm mb-3">Details:</h4>
              {pendingCreation.type === 'team' ? (
                <div className="space-y-2 text-sm text-slate-300">
                  <div><span className="text-slate-400">Name:</span> {pendingCreation.data.team_name}</div>
                  <div><span className="text-slate-400">Description:</span> {pendingCreation.data.team_description}</div>
                  <div><span className="text-slate-400">Team Code:</span> {pendingCreation.data.team_code}</div>
                  <div><span className="text-slate-400">ID:</span> {pendingCreation.data.id}</div>
                </div>
              ) : (
                <div className="space-y-2 text-sm text-slate-300">
                  <div><span className="text-slate-400">Name:</span> {pendingCreation.data.member_name}</div>
                  <div><span className="text-slate-400">Title:</span> {pendingCreation.data.member_title}</div>
                  <div><span className="text-slate-400">Team:</span> {pendingCreation.data.member_team}</div>
                  <div><span className="text-slate-400">ID:</span> {pendingCreation.data.id}</div>
                </div>
              )}
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={cancelCreation}
                className="flex-1 bg-slate-600 text-slate-200 px-4 py-2 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
              <button
                onClick={confirmCreation}
                className="flex-1 bg-gradient-to-r from-green-500 to-green-600 text-white px-4 py-2 rounded-lg font-medium hover:from-green-600 hover:to-green-700 transition-all duration-300"
              >
                Create {pendingCreation.type === 'team' ? 'Team' : 'Member'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Professional Delete Confirmation */}
      {showDeleteConfirmation && pendingDeletion.team && (
        <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg border border-red-500/30 max-w-lg w-full mx-4 shadow-xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-red-400">Delete Team Confirmation</h3>
            </div>
            
            <div className="space-y-4 mb-6">
              <div className="bg-red-900/20 p-4 rounded-lg border border-red-700/30">
                <p className="text-slate-300 text-sm font-medium mb-2">
                  You are about to permanently delete the team "{pendingDeletion.team.team_name}".
                </p>
                <p className="text-red-300 text-sm font-semibold">
                  ⚠️ This action is irreversible and cannot be undone.
                </p>
              </div>
              
              {pendingDeletion.affectedMembers.length > 0 && (
                <div className="bg-slate-700/30 p-4 rounded-lg border border-slate-600/50">
                  <h4 className="font-medium text-orange-300 text-sm mb-3">
                    Team Members That Will Be Deleted ({pendingDeletion.affectedMembers.length}):
                  </h4>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {pendingDeletion.affectedMembers.map((member) => (
                      <div key={member.id} className="flex items-center gap-2 text-sm">
                        <span className="text-slate-400">•</span>
                        <span className="text-slate-300 font-medium">{member.member_name || member.name}</span>
                        <span className="text-slate-400">({member.member_title || member.title})</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {pendingDeletion.affectedMembers.length === 0 && (
                <div className="bg-slate-700/30 p-4 rounded-lg border border-slate-600/50">
                  <p className="text-slate-300 text-sm">
                    This team has no members, so only the team itself will be deleted.
                  </p>
                </div>
              )}
              
              <div className="bg-red-900/30 p-3 rounded-lg border border-red-700/30">
                <p className="text-xs text-red-300 text-center font-medium">
                  All data will be permanently removed from the database
                </p>
              </div>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={cancelDeletion}
                className="flex-1 bg-slate-600 text-slate-200 px-4 py-3 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
              <button
                onClick={executeTeamDeletion}
                className="flex-1 bg-red-600 text-white px-4 py-3 rounded-lg font-bold hover:bg-red-700 transition-all duration-300"
              >
                Delete Team Permanently
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Professional Member Delete Confirmation */}
      {showMemberDeleteConfirmation && pendingMemberDeletion && (
        <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg border border-red-500/30 max-w-md w-full mx-4 shadow-xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-200">Delete Team Member</h3>
            </div>
            
            <div className="space-y-4 mb-6">
              <p className="text-slate-300 text-sm">
                You are about to permanently delete the team member:
              </p>
              
              <div className="bg-slate-900/60 p-4 rounded-lg border border-slate-600">
                <div className="flex items-center gap-3">
                  {(pendingMemberDeletion.member_image_link || pendingMemberDeletion.imageURL) && (
                    <img
                      src={pendingMemberDeletion.member_image_link || pendingMemberDeletion.imageURL}
                      alt={pendingMemberDeletion.member_name || pendingMemberDeletion.name}
                      className="w-12 h-12 rounded-full object-cover border-2 border-orange-500/30"
                    />
                  )}
                  <div>
                    <h4 className="font-medium text-white">
                      {pendingMemberDeletion.member_name || pendingMemberDeletion.name}
                    </h4>
                    <p className="text-orange-400 text-sm">
                      {pendingMemberDeletion.member_title || pendingMemberDeletion.title}
                    </p>
                    <p className="text-slate-400 text-xs">
                      Team: {pendingMemberDeletion.member_team || pendingMemberDeletion.team}
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="bg-red-900/30 p-3 rounded-lg border border-red-700/30">
                <p className="text-xs text-red-300 text-center font-medium">
                  This action cannot be undone. The member data will be permanently removed.
                </p>
              </div>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={cancelMemberDeletion}
                className="flex-1 bg-slate-600 text-slate-200 px-4 py-3 rounded-lg font-medium hover:bg-slate-700 transition-all duration-300"
              >
                Cancel
              </button>
              <button
                onClick={confirmMemberDeletion}
                className="flex-1 bg-red-600 text-white px-4 py-3 rounded-lg font-bold hover:bg-red-700 transition-all duration-300"
              >
                Delete Member
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Professional Expert Mode Warning */}
      {showWarningPopup && (
        <div className="fixed inset-0 bg-slate-900/30 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg border border-orange-500/30 max-w-md w-full mx-4 shadow-xl">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-200">Enable Expert Mode</h3>
            </div>
            
            <div className="space-y-3 mb-6">
              <p className="text-slate-300 text-sm leading-relaxed">
                Expert Mode allows direct editing of database fields and bypasses standard validation. 
                This is intended for advanced users with database administration experience.
              </p>
              
              <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-3">
                <h4 className="font-medium text-orange-300 text-sm mb-2">Important Considerations:</h4>
                <ul className="space-y-1 text-xs text-slate-300">
                  <li>• Modifications may affect data integrity</li>
                  <li>• Changes are applied immediately without validation</li>
                  <li>• Incorrect field types may cause application errors</li>
                  <li>• Database relationships could be impacted</li>
                </ul>
              </div>
              
              <p className="text-xs text-slate-400 text-center">
                Only proceed if you understand the database schema and potential consequences.
              </p>
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={() => setShowWarningPopup(false)}
                className="flex-1 px-4 py-2 bg-slate-600 text-slate-200 rounded-lg font-medium hover:bg-slate-700 transition-colors text-sm"
              >
                Cancel
              </button>
              <button
                onClick={currentWarningType === 'team' ? confirmTeamExpertMode : confirmMemberExpertMode}
                className="flex-1 px-4 py-2 bg-gradient-to-r from-orange-500 to-amber-500 text-white rounded-lg font-medium hover:from-orange-600 hover:to-amber-600 transition-colors text-sm"
              >
                Enable Expert Mode
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
